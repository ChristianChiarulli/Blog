<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Chris@Machine]]></title><description><![CDATA[A blog where I keep all of my notes.]]></description><link>https://www.chrisatmachine.com</link><generator>GatsbyJS</generator><lastBuildDate>Fri, 05 Mar 2021 23:37:20 GMT</lastBuildDate><item><title><![CDATA[LSP Completion Symbols in CoC]]></title><description><![CDATA[LSP Completion Symbols If you are familiar with VS Code then you have probably noticed all of the symbols you see in the completion menu…]]></description><link>https://www.chrisatmachine.com/Neovim/26-lsp-symbols/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Neovim/26-lsp-symbols/</guid><pubDate>Mon, 15 Feb 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;LSP Completion Symbols&lt;/h2&gt;
&lt;p&gt;If you are familiar with VS Code then you have probably noticed all of the symbols you see in the completion menu. You can find an example of all of the symbols provided here: &lt;a href=&quot;https://code.visualstudio.com/docs/editor/intellisense&quot;&gt;VSCode Intellisense Overview&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Adding to CoC&lt;/h2&gt;
&lt;p&gt;To add them to the CoC compeletion menu add the following to your &lt;code class=&quot;language-text&quot;&gt;coc-settings.json&lt;/code&gt;:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
        &quot;suggest.completionItemKindLabels&quot;: {
    &quot;method&quot;: &quot;  &quot;,
    &quot;function&quot;: &quot;  &quot;,
    &quot;variable&quot;: &quot;[]&quot;,
    &quot;field&quot;: &quot;  &quot;,
    &quot;typeParameter&quot;: &quot;&lt;&gt;&quot;,
    &quot;constant&quot;: &quot;  &quot;,
    &quot;class&quot;: &quot; פּ &quot;,
    &quot;interface&quot;: &quot; 蘒&quot;,
    &quot;struct&quot;: &quot;  &quot;,
    &quot;event&quot;: &quot;  &quot;,
    &quot;operator&quot;: &quot;  &quot;,
    &quot;module&quot;: &quot;  &quot;,
    &quot;property&quot;: &quot;  &quot;,
    &quot;enum&quot;: &quot; 練&quot;,
    &quot;reference&quot;: &quot;  &quot;,
    &quot;keyword&quot;: &quot;  &quot;,
    &quot;file&quot;: &quot;  &quot;,
    &quot;folder&quot;: &quot; ﱮ &quot;,
    &quot;color&quot;: &quot;  &quot;,
    &quot;unit&quot;: &quot; 塞 &quot;,
    &quot;snippet&quot;: &quot;  &quot;,
    &quot;text&quot;: &quot;  &quot;,
    &quot;constructor&quot;: &quot;  &quot;,
    &quot;value&quot;: &quot;  &quot;,
    &quot;enumMember&quot;: &quot;  &quot;
  },
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;This was as close as I could get with the symbols provided by &lt;a href=&quot;https://www.nerdfonts.com/cheat-sheet&quot;&gt;Nerdfont Icons&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feel free to explore the above link and change the symbols to whatever you like.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[First Smart Contract]]></title><description><![CDATA[Development Environment In this tutorial we'll introduce the Remix code editor. In the future I will discuss how to set up a local dev…]]></description><link>https://www.chrisatmachine.com/Blockchain/01-first-smart-contract/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Blockchain/01-first-smart-contract/</guid><pubDate>Sun, 24 Jan 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Development Environment&lt;/h2&gt;
&lt;p&gt;In this tutorial we&apos;ll introduce the &lt;a href=&quot;https://remix.ethereum.org/&quot;&gt;Remix&lt;/a&gt; code editor. In the future I will discuss how to set up a local dev environment. For now Remix is a great Solidity IDE for learning.&lt;/p&gt;
&lt;p&gt;In the bar on the left there are 4 sections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A file browser&lt;/li&gt;
&lt;li&gt;A section for the compiler&lt;/li&gt;
&lt;li&gt;A section for deploying and running your smart contract&lt;/li&gt;
&lt;li&gt;A plugin section&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will use everything except for the plugin section for now&lt;/p&gt;
&lt;p&gt;So to get started do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a file called &lt;code class=&quot;language-text&quot;&gt;SimpleStorage.sol&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set the compiler version to &lt;code class=&quot;language-text&quot;&gt;8.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Tick the &lt;code class=&quot;language-text&quot;&gt;autocompile&lt;/code&gt; checkbox&lt;/li&gt;
&lt;li&gt;Set the environment to &lt;code class=&quot;language-text&quot;&gt;JavaScript VM&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ok we are now ready to start writing our first smart contract.&lt;/p&gt;
&lt;h2&gt;Creating a Smart Contract&lt;/h2&gt;
&lt;p&gt;For this tutorial I will be using some code snippets from the Solidity Language Documentation website linked &lt;a href=&quot;https://docs.soliditylang.org/en/v0.8.0/introduction-to-smart-contracts.html#a-simple-smart-contract&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here is the contract will will be creating:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      // SPDX-License-Identifier: GPL-3.0
pragma solidity &gt;=0.4.16 &lt;0.9.0;

contract SimpleStorage {
    uint storedData;

    constructor(uint _storedData) {
        storedData = _storedData;
    }

    function set(uint x) public {
        storedData = x;
    }

    function get() public view returns (uint) {
        return storedData;
    }
}
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;The first line will be a comment specifying your license&lt;/p&gt;
&lt;p&gt;The second is a &lt;code class=&quot;language-text&quot;&gt;pragma&lt;/code&gt; to tell the compiler what version it should use.&lt;/p&gt;
&lt;p&gt;If you are familiar with &lt;code class=&quot;language-text&quot;&gt;classes&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;objects&lt;/code&gt; in other languages you will find that a &lt;code class=&quot;language-text&quot;&gt;contract&lt;/code&gt; is pretty similar at first glance.&lt;/p&gt;
&lt;p&gt;A &lt;code class=&quot;language-text&quot;&gt;contract&lt;/code&gt; will typically contain &lt;code class=&quot;language-text&quot;&gt;fields&lt;/code&gt;, a &lt;code class=&quot;language-text&quot;&gt;constructor&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;functions&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The first and only &lt;code class=&quot;language-text&quot;&gt;field&lt;/code&gt; in our contract is &lt;code class=&quot;language-text&quot;&gt;storedData&lt;/code&gt;. You&apos;ll notice it is an &lt;code class=&quot;language-text&quot;&gt;uint&lt;/code&gt; this is an integer that is always positive.&lt;/p&gt;
&lt;p&gt;Next we&apos;ll take a look at the &lt;code class=&quot;language-text&quot;&gt;constructor&lt;/code&gt;. The constructor will run when the contract is instantiated. Typically a &lt;code class=&quot;language-text&quot;&gt;constructor&lt;/code&gt; used to give fields in a class/contract initial values.&lt;/p&gt;
&lt;p&gt;You&apos;ll notice the constructor takes a parameter &lt;code class=&quot;language-text&quot;&gt;_storedData&lt;/code&gt;. If we just passed&lt;code class=&quot;language-text&quot;&gt;storedData&lt;/code&gt; the value would &lt;code class=&quot;language-text&quot;&gt;shadow&lt;/code&gt; the field named &lt;code class=&quot;language-text&quot;&gt;storedData&lt;/code&gt; hence the underscore.&lt;/p&gt;
&lt;p&gt;The first function will set the &lt;code class=&quot;language-text&quot;&gt;storedData&lt;/code&gt; value to the value &lt;code class=&quot;language-text&quot;&gt;x&lt;/code&gt; that is passed.&lt;/p&gt;
&lt;p&gt;The second function will return the &lt;code class=&quot;language-text&quot;&gt;storedData&lt;/code&gt; value to the caller.&lt;/p&gt;
&lt;h2&gt;Deploying and Interacting with our Smart Contract&lt;/h2&gt;
&lt;p&gt;Head over to the deploy section in the Remix editor.&lt;/p&gt;
&lt;p&gt;Make sure the Environment is set to &lt;code class=&quot;language-text&quot;&gt;JavaScriptVM&lt;/code&gt;. This will make it so the transactions take place in a sandbox blockchain in the browser.&lt;/p&gt;
&lt;p&gt;You&apos;ll also notice you have a test account funded with 100 ether, you&apos;ll have 15 test accounts to start with.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note on Gas&lt;/strong&gt; All operations that write data to the blockchain will require some gas. This means you will need to spend some ether in order to deploy this contract and run the &lt;code class=&quot;language-text&quot;&gt;set()&lt;/code&gt; function we wrote earlier. Operations will vary in the amount of gas they use. The gas limit option will allow you to specify a limit to the amount of gas you are willing to use. An important thing to remember is that that each operation will run until the gas limit is reached. Spent gas will remain spent, so if some of the operations were fulfilled and you don&apos;t have enough gas to finish the transaction then you will still have spent ether on the fulfilled operations.&lt;/p&gt;
&lt;p&gt;We can now deploy our smart contract. Make sure to give the &lt;code class=&quot;language-text&quot;&gt;storedData&lt;/code&gt; value an initial value and press the &lt;code class=&quot;language-text&quot;&gt;Deploy&lt;/code&gt; button.&lt;/p&gt;
&lt;p&gt;After deploying the contract you can click the dropdown arrow and interact with an instance of it on the blockchain.&lt;/p&gt;
&lt;p&gt;In future tutorials I will show you how to deploy this on a local dev environment and create a simple front end.&lt;/p&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://remix-ide.readthedocs.io/en/latest/run.html#run-setup&quot;&gt;Remix Docs&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Install MongoDB Arch Linux]]></title><description><![CDATA[Install using yay If you see this error: Just recieve the key using: Start or enable the service Run mongo Exit]]></description><link>https://www.chrisatmachine.com/Linux/09-mongodb-arch-linux/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Linux/09-mongodb-arch-linux/</guid><pubDate>Wed, 25 Nov 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Install using yay&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      yay -S mongodb-bin
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;If you see this error:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      ==&gt; PGP keys need importing:
 -&gt; 27EDEAF22F3ABCEB50DB9A125CC908FDB71E12C2, required by: libcurl-openssl-1.0
==&gt; Import? [Y/n] y
:: Importing keys with gpg......
gpg: keyserver receive failed: General error
==&gt; Error: Problem importing keys
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Just recieve the key using:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      gpg --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 --recv 27EDEAF22F3ABCEB50DB9A125CC908FDB71E12C2
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Start or enable the service&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      systemctl enable mongodb

systemctl start mongodb
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Run mongo&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      mongo
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Exit&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      exit
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  </content:encoded></item><item><title><![CDATA[Creating a Todolist with FastAPI]]></title><description><![CDATA[Create development Environment Install packages]]></description><link>https://www.chrisatmachine.com/FastAPI/01-todolist/</link><guid isPermaLink="false">https://www.chrisatmachine.com/FastAPI/01-todolist/</guid><pubDate>Sat, 21 Nov 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Create development Environment&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      conda create -n todolist python=3.9 pip -y

conda activate todolist
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Install packages&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      pip install fastapi

pip install uvicorn

pip install fastapi[all] ## this installs a lot of useful stuff
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  </content:encoded></item><item><title><![CDATA[Vimspector (for Java)]]></title><description><![CDATA[What is Vimspector? It is a debugger plugin for Vim and Neovim I am going to be using Java as an example in this article but I'll probably…]]></description><link>https://www.chrisatmachine.com/Neovim/25-vimspector/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Neovim/25-vimspector/</guid><pubDate>Thu, 05 Nov 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;What is Vimspector?&lt;/h2&gt;
&lt;p&gt;It is a debugger plugin for Vim and Neovim&lt;/p&gt;
&lt;p&gt;I am going to be using Java as an example in this article but I&apos;ll probably do ones for Python and JavaScript as well.&lt;/p&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;h3&gt;Note&lt;/h3&gt;
&lt;p&gt;You will need to have CoC installed I have a blog post and video for installing CoC here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=OXEVhnY621M&quot;&gt;YouTube Video&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.chrisatmachine.com/Neovim/04-vim-coc/&quot;&gt;Blog Post&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;code class=&quot;language-text&quot;&gt;coc-java&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Commands&lt;/h2&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;h2&gt;Repo Links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/neoclide/coc-java&quot;&gt;coc-java&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Java in Neovim]]></title><description><![CDATA[Current State of Java + Neovim Available: Treesitter highlighting Goto definition Goto references Formatting Diagnostics Hover Refactor…]]></description><link>https://www.chrisatmachine.com/Neovim/24-neovim-and-java/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Neovim/24-neovim-and-java/</guid><pubDate>Wed, 04 Nov 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Current State of Java + Neovim&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Available:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter&quot;&gt;Treesitter highlighting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Goto definition&lt;/li&gt;
&lt;li&gt;Goto references&lt;/li&gt;
&lt;li&gt;Formatting&lt;/li&gt;
&lt;li&gt;Diagnostics&lt;/li&gt;
&lt;li&gt;Hover&lt;/li&gt;
&lt;li&gt;Refactor/Rename&lt;/li&gt;
&lt;li&gt;Search files (FZF)&lt;/li&gt;
&lt;li&gt;Search text (FZF)&lt;/li&gt;
&lt;li&gt;Quickfix&lt;/li&gt;
&lt;li&gt;Lombok&lt;/li&gt;
&lt;li&gt;Configuration in &lt;code class=&quot;language-text&quot;&gt;coc-settings.json&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Difficult to Implement:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Debugging&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;* This can be done but in my opinion it&apos;s difficult to get setup, if you&apos;d like to look further into it checkout the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mfussenegger/nvim-dap&quot;&gt;nvim-dap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/puremourning/vimspector&quot;&gt;vimspector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Note&lt;/h3&gt;
&lt;p&gt;You will need to have CoC installed I have a blog post and video for installing CoC here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=OXEVhnY621M&quot;&gt;YouTube Video&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.chrisatmachine.com/Neovim/04-vim-coc/&quot;&gt;Blog Post&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Treesitter&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;You will need Neovim&gt;=0.5&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install with VimPlug&lt;/li&gt;
&lt;/ul&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      Plug &apos;nvim-treesitter/nvim-treesitter&apos;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Add this to your &lt;code class=&quot;language-text&quot;&gt;init.vim&lt;/code&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      require&apos;nvim-treesitter.configs&apos;.setup {
  ensure_installed = &quot;maintained&quot;, -- one of &quot;all&quot;, &quot;maintained&quot; (parsers with maintainers), or a list of languages
  highlight = {
    enable = true,              -- false will disable the whole extension
  },
}
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;&lt;strong&gt;coc-java&lt;/strong&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :CocInstall coc-java
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;&lt;strong&gt;Lombok&lt;/strong&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      sudo mkdir /usr/local/share/lombok

sudo wget https://projectlombok.org/downloads/lombok.jar -O /usr/local/share/lombok/lombok.jar
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Commands&lt;/h2&gt;
&lt;p&gt;Here are a bunch of commands to get the behavior of this video:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      &lt;Plug&gt;(coc-codeaction)              &quot; line action
&lt;Plug&gt;(coc-definition)              &quot; definition
&lt;Plug&gt;(coc-references)              &quot; references
&lt;Plug&gt;(coc-type-definition)         &quot; type definition
&lt;Plug&gt;(coc-rename)                  &quot; rename
&lt;Plug&gt;(coc-declaration)             &quot; declaration
&lt;Plug&gt;(coc-implementation)          &quot; implementation
&lt;Plug&gt;(coc-format)                  &quot; format
&lt;Plug&gt;(coc-fix-current)             &quot; quickfix
&lt;Plug&gt;(coc-codelens-action)         &quot; code lens
&lt;Plug&gt;(coc-diagnostic-next)         &quot; next diagnostic
&lt;Plug&gt;(coc-diagnostic-next-error)   &quot; next error
:CocList diagnostics                &quot; diagnostics
:CocList outline                    &quot; search outline
:CocList -I symbols                 &quot; references
:CocUpdate                          &quot; update CoC
:CocDisable                         &quot; disable CoC
:CocEnable                          &quot; enable CoC
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;coc-settings.json&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      // codelens
&quot;codeLens.enable&quot;: true,
&quot;java.referencesCodeLens.enabled&quot;: true,
&quot;java.jdt.ls.vmargs&quot;: &quot;-javaagent:/usr/local/share/lombok.jar&quot;,
// &quot;java.jdt.ls.vmargs&quot;: &quot;-javaagent:/usr/local/share/lombok.jar -Xbootclasspath/a:/usr/local/share/lombok.jar&quot;, // for older versions of Java
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Repo Links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/neoclide/coc-java&quot;&gt;coc-java&lt;/a&gt;
&lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter&quot;&gt;treesitter&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[I hate Java (and Spring)]]></title><description><![CDATA[Oracle makes my life more difficult than it needs to be The level of ceremony and boilerplate is out of control (Use Lombok!) Spring was…]]></description><link>https://www.chrisatmachine.com/Opinion/java-is-stupid-and-i-hate-it/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Opinion/java-is-stupid-and-i-hate-it/</guid><pubDate>Wed, 07 Oct 2020 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;Oracle makes my life more difficult than it needs to be&lt;/li&gt;
&lt;li&gt;The level of ceremony and boilerplate is out of control (Use Lombok!)&lt;/li&gt;
&lt;li&gt;Spring was such a complicated framework that it needed a framework on top called Spring Boot and even that is kind of a pain so Spring Initializr (which is spelled dumb) has to exist&lt;/li&gt;
&lt;li&gt;Also Annotations are too magical in Spring&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I always have difficulty finding documentation that is either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A. Complete&lt;/li&gt;
&lt;li&gt;B. Relevant and updated&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Maven and Gradle are a pain in the ass (also many teams use both which just adds to the complexity)&lt;/li&gt;
&lt;li&gt;Which leads me to the fact that there is still no modern (usable) package manager&lt;/li&gt;
&lt;li&gt;The mascot is dumb and idk what it&apos;s supposed to be&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Steam on Arch Linux]]></title><description><![CDATA[Enable Multilib Uncomment the  section in  Upgrade System Install Steam Enable Proton You can enable Proton in the Steam Client in  To force…]]></description><link>https://www.chrisatmachine.com/Linux/08-steam-on-linux/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Linux/08-steam-on-linux/</guid><pubDate>Sun, 20 Sep 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Enable Multilib&lt;/h2&gt;
&lt;p&gt;Uncomment the &lt;code class=&quot;language-text&quot;&gt;[multilib]&lt;/code&gt; section in &lt;code class=&quot;language-text&quot;&gt;/etc/pacman.conf&lt;/code&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      [multilib]
Include = /etc/pacman.d/mirrorlist
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Upgrade System&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      pacman -Syu
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Install Steam&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      sudo pacman -S steam
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Enable Proton&lt;/h2&gt;
&lt;p&gt;You can enable Proton in the Steam Client in &lt;code class=&quot;language-text&quot;&gt;Steam &amp;gt; Settings &amp;gt; Steam Play&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To force enable Proton, right click on the game, &lt;code class=&quot;language-text&quot;&gt;Properties &amp;gt; General &amp;gt; Force the use of a specific Steam Play compatibility tool&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Links References&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/steam&quot;&gt;ArchWiki&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Project Wide Find & Replace w/ FAR]]></title><description><![CDATA[Installing the FAR Plugin FAR is a Vim/Neovim plugin that will allow you to perform project wide find & replace Install with Vim-plug…]]></description><link>https://www.chrisatmachine.com/Neovim/23-far-find-and-replace/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Neovim/23-far-find-and-replace/</guid><pubDate>Mon, 14 Sep 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Installing the FAR Plugin&lt;/h2&gt;
&lt;p&gt;FAR is a Vim/Neovim plugin that will allow you to perform project wide find &amp;#x26; replace&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install with Vim-plug:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      Plug &apos;ChristianChiarulli/far.vim&apos;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;( &lt;strong&gt;NOTE&lt;/strong&gt; )&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You may also need to run:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :UpdateRemotePlugins
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Currently I&apos;m using a fork that improves the experience in my opinion, it&apos;s based on this &lt;a href=&quot;https://github.com/brooth/far.vim/issues/94&quot;&gt;issue&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Add this to your &lt;code class=&quot;language-text&quot;&gt;init.vim&lt;/code&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      let g:far#source=&apos;rgnvim&apos;
&quot; let g:far#source=&apos;rg&apos;
&quot; let g:far#source=&apos;vimgrep&apos;
&quot; let g:far#source=&apos;ag&apos;

set lazyredraw            &quot; improve scrolling performance when navigating through large results

let g:far#window_width=60
&quot; Use %:p with buffer option only
let g:far#file_mask_favorites=[&apos;%:p&apos;, &apos;**/*.*&apos;, &apos;**/*.js&apos;, &apos;**/*.py&apos;, &apos;**/*.java&apos;, &apos;**/*.css&apos;, &apos;**/*.html&apos;, &apos;**/*.vim&apos;, &apos;**/*.cpp&apos;, &apos;**/*.c&apos;, &apos;**/*.h&apos;, ]
let g:far#window_min_content_width=30
let g:far#enable_undo=1
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Commands&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Find &amp;#x26; Replace in buffer (current file):&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :Farr --source=vimgrep
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find &amp;#x26; Replace project:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :Farr --source=rgnvim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you&apos;re using the &lt;code class=&quot;language-text&quot;&gt;which-key plugin&lt;/code&gt;:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      let g:which_key_map.f = {
      \ &apos;name&apos; : &apos;+find &amp; replace&apos; ,
      \ &apos;b&apos; : [&apos;:Farr --source=vimgrep&apos;    , &apos;buffer&apos;],
      \ &apos;p&apos; : [&apos;:Farr --source=rgnvim&apos;     , &apos;project&apos;],
      \ }
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Inside FAR Buffer Commands&lt;/h3&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      &quot;     Below are the default mappings and corresponding variable names in

&quot; x v_x   - Exclude item under the cursor.

&quot; i v_i   - Include item under the cursor.

&quot; t v_t   - Toggle item exclusion under the cursor.

&quot; f v_f   - Smartly toggle item exclusion under the cursor: exclude all items when all are excluded, otherwise exclude all items.

&quot; X       - Exclude all items.

&quot; I       - Include all items.

&quot; T       - Toggle exclusion for all items.

&quot; F       - Smartly toggle exclusion for all items: include all items when all are excluded, otherwise exclude all items.

&quot; &lt;CR&gt;    - Jump to the source code of the item under the cursor. See |far-jump|

&quot; p       - Open preview window (if not) and scroll to the item under the cursor. See |far-preview|

&quot; P       - Close preview window. See |far-preview|

&quot; CTRL-K  - Scroll preview window up (if open). See |far-preview|, |g:far#preview_window_scroll_step|

&quot; CTRL-J  - Scroll preview window down (if open). See |far-preview|, |g:far#preview_window_scroll_step|

&quot; zo      - Expand node under the cursor.

&quot; zc      - Collapse node under the cursor.

&quot; za      - Toggle node expanding under the cursor.

&quot; zs      - Smartly toggle exclusion for all nodes: expand all nodes when all are collapsed, otherwise collapse all nodes.

&quot; zr v_zr - Expand all nodes.

&quot; zm v_zm - Collapse all nodes.

&quot; zA v_zA - Toggle exclusion for all nodes.

&quot; zS v_zS - Smartly toggle exclusion for all nodes: expand all nodes when all are collapsed, otherwise collapse all nodes.

&quot; s v_s   - Execute |:Fardo|&lt;CR&gt;, to replace all included items.

&quot; u v_s   - Execute |:Farundo|&lt;CR&gt;, to undo the last replacement by |:Fardo|.

&quot; U v_U   - Execute |:Farundo| --all=1&lt;CR&gt;, to undo all replacements by |:Fardo|. For param &apos;--all=&apos; see |farundo-params|.

&quot; q v_q   - Close searching result buffer and its preview buffer (if exists)
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Links &amp;#x26; Repos&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/brooth/far.vim&quot;&gt;FAR&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/brooth/far.vim/issues/94&quot;&gt;Glob Issue&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[VSCodium & Neovim]]></title><description><![CDATA[What is VSCodium? From : Microsoft’s vscode source code is open source (MIT-licensed), but the product available for download (Visual Studio…]]></description><link>https://www.chrisatmachine.com/Neovim/22-vscodium-neovim/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Neovim/22-vscodium-neovim/</guid><pubDate>Tue, 01 Sep 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;What is VSCodium?&lt;/h2&gt;
&lt;p&gt;From &lt;code class=&quot;language-text&quot;&gt;vscodium.com&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;Microsoft’s vscode source code is open source (MIT-licensed), but the product available for download (Visual Studio Code) is licensed under this not-FLOSS license and contains telemetry/tracking.&lt;/p&gt;
&lt;h3&gt;Installing VSCodium&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On Mac&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      brew install --cask vscodium
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Arch Linux&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      yay -S vscodium
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ubuntu&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      sudo apt install vscodium
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Configuring Plugins&lt;/h3&gt;
&lt;p&gt;By default you will be able to use all of the extensions available on &lt;a href=&quot;https://open-vsx.org/&quot;&gt;open-vsx.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want all of the extensions available in vanilla VS Code then you will need to edit &lt;code class=&quot;language-text&quot;&gt;product.json&lt;/code&gt; and add the following:&lt;/p&gt;
&lt;code-fence lang=&quot;json&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      &quot;extensionsGallery&quot;: {
    &quot;serviceUrl&quot;: &quot;https://marketplace.visualstudio.com/_apis/public/gallery&quot;,
    &quot;itemUrl&quot;: &quot;https://marketplace.visualstudio.com/items&quot;
}
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h4&gt;Finding product.json on Mac&lt;/h4&gt;
&lt;p&gt;Open &lt;code class=&quot;language-text&quot;&gt;Finder&lt;/code&gt; then &lt;code class=&quot;language-text&quot;&gt;Applications&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then right click &lt;code class=&quot;language-text&quot;&gt;VSCodium&lt;/code&gt; and select &lt;code class=&quot;language-text&quot;&gt;Show Package Contents&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;From here the path is &lt;code class=&quot;language-text&quot;&gt;Contents/Resources/app/product.json&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Finding product.json on Linux&lt;/h4&gt;
&lt;p&gt;Here is the path to &lt;code class=&quot;language-text&quot;&gt;product.json&lt;/code&gt; on Linux:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      /usr/share/vscodium-bin/resources/app/product.json
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;The Neovim Extension&lt;/h2&gt;
&lt;p&gt;From the repo description:&lt;/p&gt;
&lt;p&gt;The extension is using full embedded neovim instance as backend (with the exception of the insert mode and window/buffer/file management), no more half-complete VIM emulation&lt;/p&gt;
&lt;h3&gt;Install Neovim Extension&lt;/h3&gt;
&lt;p&gt;Search for the Neo Vim extension&lt;/p&gt;
&lt;h2&gt;Integrating your config&lt;/h2&gt;
&lt;p&gt;To integrate your config you will just need to point the extension to your &lt;code class=&quot;language-text&quot;&gt;nvim&lt;/code&gt; binary and &lt;code class=&quot;language-text&quot;&gt;init.vim&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;The Which-key Extension&lt;/h2&gt;
&lt;p&gt;Search for the Which-key extension&lt;/p&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;You can find sample configurations in my &lt;code class=&quot;language-text&quot;&gt;nvim&lt;/code&gt; repo&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;General/which-key settings: &lt;a href=&quot;https://github.com/ChristianChiarulli/nvim/blob/master/utils/vscode_config/settings.json&quot;&gt;settings.json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Keybindings: &lt;a href=&quot;https://github.com/ChristianChiarulli/nvim/blob/master/utils/vscode_config/keybindings.json&quot;&gt;keybindings.json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Neovim settings &lt;a href=&quot;https://github.com/ChristianChiarulli/nvim/blob/master/vscode/settings.vim&quot;&gt;settings.vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Links to repos&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/VSCodium/vscodium&quot;&gt;VSCodium&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/asvetliakov/vscode-neovim&quot;&gt;Neo Vim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/VSpaceCode/vscode-which-key&quot;&gt;vscode-which-key&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Emojis in Neovim 💯👍😜]]></title><description><![CDATA[Supporting emoji ✌ Make sure your terminal supports emojis You will also need a font that will support emojis such as: On Arch Linux you…]]></description><link>https://www.chrisatmachine.com/Neovim/21-coc-emoji/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Neovim/21-coc-emoji/</guid><pubDate>Fri, 31 Jul 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Supporting emoji ✌&lt;/h2&gt;
&lt;p&gt;Make sure your terminal supports emojis&lt;/p&gt;
&lt;p&gt;You will also need a font that will support emojis such as:&lt;/p&gt;
&lt;p&gt;On Arch Linux you will need to:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      sudo pacman -S noto-fonts-emoji
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h3&gt;Note 📓&lt;/h3&gt;
&lt;p&gt;You will need to have CoC installed I have a blog post and video for installing CoC here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=OXEVhnY621M&quot;&gt;YouTube Video&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.chrisatmachine.com/Neovim/04-vim-coc/&quot;&gt;Blog Post&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Install 📥&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :CocInstall coc-emoji
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Commands ⌨&lt;/h2&gt;
&lt;p&gt;Emojis, are enabled for markdown files only by default.&lt;/p&gt;
&lt;p&gt;You can add filetypes with the following to you &lt;code class=&quot;language-text&quot;&gt;coc-settings.json&lt;/code&gt;:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      &quot;coc.source.emoji.filetypes&quot;: [&quot;markdown&quot;]
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;To see a list of emoji completion candidates, &lt;code class=&quot;language-text&quot;&gt;:&lt;/code&gt; is the trigger character.&lt;/p&gt;
&lt;p&gt;It is also possible to change the emoji trigger character by putting the following in your coc-settings.json:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      &quot;coc.source.emoji.triggerCharacters&quot;: [&quot;TRIGGERCHAR&quot;]
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  </content:encoded></item><item><title><![CDATA[Using Live Server with Neovim]]></title><description><![CDATA[What is Live Server? Live-server is an  package that will allow you to see real time changes for  files in your browser. Note You will need…]]></description><link>https://www.chrisatmachine.com/Neovim/20-live-server/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Neovim/20-live-server/</guid><pubDate>Thu, 30 Jul 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;What is Live Server?&lt;/h2&gt;
&lt;p&gt;Live-server is an &lt;code class=&quot;language-text&quot;&gt;npm&lt;/code&gt; package that will allow you to see real time changes for &lt;code class=&quot;language-text&quot;&gt;.html&lt;/code&gt; files in your browser.&lt;/p&gt;
&lt;h3&gt;Note&lt;/h3&gt;
&lt;p&gt;You will need to have &lt;code class=&quot;language-text&quot;&gt;node&lt;/code&gt; &amp;#x26; &lt;code class=&quot;language-text&quot;&gt;npm&lt;/code&gt; installed I have a blog post about installing node using &lt;code class=&quot;language-text&quot;&gt;fnm&lt;/code&gt; &lt;a href=&quot;https://www.chrisatmachine.com/Nodejs/02-Install-FNM/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      npm i -g live-server
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Commands&lt;/h2&gt;
&lt;p&gt;You can have live server monitor and html file like this:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      live-server some-file.html
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Or watch a directory like this:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      live-server some-directory/
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  </content:encoded></item><item><title><![CDATA[Installing Fast Node Manager (fnm)]]></title><description><![CDATA[Using a node manager helps you deal with annoying  permissions issues. If you already use something like  you'll notice  is significantly…]]></description><link>https://www.chrisatmachine.com/Nodejs/02-Install-FNM/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Nodejs/02-Install-FNM/</guid><pubDate>Thu, 30 Jul 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Using a node manager helps you deal with annoying &lt;code class=&quot;language-text&quot;&gt;npm&lt;/code&gt; permissions issues.&lt;/p&gt;
&lt;p&gt;If you already use something like &lt;code class=&quot;language-text&quot;&gt;nvm&lt;/code&gt; you&apos;ll notice &lt;code class=&quot;language-text&quot;&gt;fnm&lt;/code&gt; is significantly faster.&lt;/p&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;h3&gt;On Mac:&lt;/h3&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      brew install fnm
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h3&gt;On Linux:&lt;/h3&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      sudo apt install curl
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;The following command will automatically install &lt;code class=&quot;language-text&quot;&gt;fnm&lt;/code&gt; using &lt;code class=&quot;language-text&quot;&gt;curl&lt;/code&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      curl -fsSL https://fnm.vercel.app/install | bash -s -- --install-dir $HOME/.local/bin
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;If you don&apos;t already have &lt;code class=&quot;language-text&quot;&gt;.local/bin&lt;/code&gt; in your path&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      export PATH=/home/$USER/.local/bin/fnm:$PATH
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h3&gt;Upgrade&lt;/h3&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      curl -fsSL https://fnm.vercel.app/install | bash -s -- --install-dir $HOME/.local/bin --skip-shell
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;bashrc/zshrc config&lt;/h2&gt;
&lt;p&gt;Add the following to you &lt;code class=&quot;language-text&quot;&gt;.bashrc&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;.zshrc&lt;/code&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      eval &quot;$(fnm env)&quot;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Commands&lt;/h2&gt;
&lt;h3&gt;List install candidates&lt;/h3&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      fnm ls-remote
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h3&gt;Install a node version&lt;/h3&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      fnm install 13.14.0
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h3&gt;List currently installed versions&lt;/h3&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      fnm ls
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h3&gt;Choose version you would like to use&lt;/h3&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      fnm use 13.14.0
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h3&gt;Check currently active version&lt;/h3&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      fnm current
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h3&gt;Alias a version&lt;/h3&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      fnm alias 13.14.0 nickname

fnm use nickname
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h3&gt;Default a version&lt;/h3&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      fnm default 13.14.0
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Autocompletions&lt;/h2&gt;
&lt;p&gt;You can replace &lt;code class=&quot;language-text&quot;&gt;zsh&lt;/code&gt; with &lt;code class=&quot;language-text&quot;&gt;bash&lt;/code&gt; if you are using &lt;code class=&quot;language-text&quot;&gt;bash&lt;/code&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      mkdir -p ~/.config/zsh/completions

touch ~/.config/zsh/completions/_fnm

fnm completions --shell=zsh &gt; ~/.config/zsh/completions/_fnm
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Then add the following to your &lt;code class=&quot;language-text&quot;&gt;.zshrc&lt;/code&gt;:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      fpath+=~/.config/zsh/completions/_fnm
compinit
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Versioning &lt;code class=&quot;language-text&quot;&gt;node&lt;/code&gt; should be much faster now&lt;/p&gt;
&lt;h3&gt;Link to Author&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Schniz/fnm&quot;&gt;fnm&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[var, let, const]]></title><description><![CDATA[One of the first features you may have noticed in ES6 is a new way to declare variables (and now constants) with  and  instead of just…]]></description><link>https://www.chrisatmachine.com/Javascript/01-var-let-const/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Javascript/01-var-let-const/</guid><pubDate>Mon, 20 Jul 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;One of the first features you may have noticed in ES6 is a new way to declare variables (and now constants) with &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt; instead of just &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;These new keywords are used to create &lt;strong&gt;Block Scoped&lt;/strong&gt; variables and constants.&lt;/p&gt;
&lt;p&gt;Variable declarations with &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt; were only capable of &lt;strong&gt;Global Scope&lt;/strong&gt; and &lt;strong&gt;Function Scope&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;All three keywords are capable of &lt;strong&gt;Global Scope&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Keyword Behavior&lt;/h2&gt;
&lt;p&gt;Below is a table you can quickly reference explaining the differences. If you are looking for a recommendation for which ones to use in what scenarios here is my recommendation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Avoid using &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt; wherever possible&lt;/li&gt;
&lt;li&gt;When you have a variable you expect will change over time use &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Keyword&lt;/th&gt;
&lt;th&gt;Scope&lt;/th&gt;
&lt;th&gt;Redefinable&lt;/th&gt;
&lt;th&gt;Redeclarable&lt;/th&gt;
&lt;th&gt;Hoisting&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;var&lt;/td&gt;
&lt;td&gt;function&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;let&lt;/td&gt;
&lt;td&gt;block&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;const&lt;/td&gt;
&lt;td&gt;block&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Function Scope&lt;/h2&gt;
&lt;p&gt;Notice in the following code snippet we can access all of the variables from within the function.&lt;/p&gt;
&lt;code-fence lang=&quot;js&quot; heading=&quot;Function Scope&quot;&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      function func() {
  var var1 = &quot;I am function scoped&quot;
  let var2 = &quot;Technically I&apos;m block scoped&quot;
  const var3 = &quot;But right now you can&apos;t tell&quot;

  console.log(var1)
  console.log(var2)
  console.log(var3)
}

func()
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Now that we have moved the log statements outside of the function you&apos;ll see we end up with a reference error.&lt;/p&gt;
&lt;code-fence lang=&quot;js&quot; heading=&quot;Function Scope Reference Error&quot;&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      function func() {
  var var1 = &quot;I am function scoped&quot;
  let var2 = &quot;Technically I&apos;m block scoped&quot;
  const var3 = &quot;But right now you can&apos;t tell&quot;
}

func()

// Comment out each one to see that it returns a reference error

console.log(var1)
console.log(var2)
console.log(var3)
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Block Scope&lt;/h2&gt;
&lt;p&gt;In the following example &lt;code class=&quot;language-text&quot;&gt;var1&lt;/code&gt; will be accessible outside of the &lt;code class=&quot;language-text&quot;&gt;if&lt;/code&gt; statement which is considered a block. Both &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt; will be confined to the &lt;code class=&quot;language-text&quot;&gt;if&lt;/code&gt; block.&lt;/p&gt;
&lt;code-fence lang=&quot;js&quot; heading=&quot;Block Scope&quot;&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      if (true) {
  var var1 = &quot;You can access me outside the block&quot;
  let var2 = &quot;You can&apos;t access me outside the block&quot;
  const var3 = &quot;Me neither&quot;

  console.log(var1)
  console.log(var2)
  console.log(var3)
}

// Uncomment each one separately, notice let and const throw reference errors

// console.log(var1);
// console.log(var2);
// console.log(var3);
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Redefining keywords&lt;/h2&gt;
&lt;p&gt;You will be able to redefine variables declared with &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;.&lt;/p&gt;
&lt;code-fence lang=&quot;js&quot; heading=&quot;Redefining variable declared with var&quot;&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      var foo = 1

console.log(foo)

foo = &quot;I can also be a string&quot;

console.log(foo)
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;You will also be able to redefine variables declared with &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt;.&lt;/p&gt;
&lt;code-fence lang=&quot;js&quot; heading=&quot;Redefining variable declared with let&quot;&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      let bar = 1

console.log(bar)

bar = &quot;I can also be a string&quot;

console.log(bar)
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;This should go without saying but you can&apos;t redefine a constant declared with &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt; it will throw a type error.&lt;/p&gt;
&lt;code-fence lang=&quot;js&quot; heading=&quot;Failing to redefine constant declared with const&quot;&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      const baz = 1

console.log(baz)

baz = &quot;This is gonna fail&quot;

console.log(baz)
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  </content:encoded></item><item><title><![CDATA[Introduction to Theoretical Analysis]]></title><description><![CDATA[Benefits of Theoretical Analysis Can evaluate the speed of an algorithm independently of the hardware & software environment Able to use a…]]></description><link>https://www.chrisatmachine.com/DSAndAlgos/01-Introduction_To_Theoretical_Analysis/</link><guid isPermaLink="false">https://www.chrisatmachine.com/DSAndAlgos/01-Introduction_To_Theoretical_Analysis/</guid><pubDate>Sun, 19 Jul 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Benefits of Theoretical Analysis&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Can evaluate the speed of an algorithm &lt;font color=Red&gt;independently&lt;/font&gt; of the hardware &amp;#x26; software environment&lt;/li&gt;
&lt;li&gt;Able to use a &lt;font color=Red&gt;pseudocode&lt;/font&gt; desricption of an algorithm instead of an implementation&lt;/li&gt;
&lt;li&gt;Characterize the &lt;font color=Red&gt;running time&lt;/font&gt; as a function of the &lt;font color=Red&gt;input size, &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.43056em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;Takes into account &lt;font color=Red&gt;all&lt;/font&gt; possible inputs&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What is Pseudocode?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=Red&gt;High-level&lt;/font&gt; description of an algorithm&lt;/li&gt;
&lt;li&gt;&lt;font color=Red&gt;Preferred&lt;/font&gt; notation for describing algorithms&lt;/li&gt;
&lt;li&gt;Designed for &lt;font color=Red&gt;human&lt;/font&gt; understanding&lt;/li&gt;
&lt;li&gt;&lt;font color=Red&gt;Suppresses&lt;/font&gt; unimportant details&lt;/li&gt;
&lt;li&gt;&lt;font color=Red&gt;Hides&lt;/font&gt; program design issues&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Common Pseudocode Notation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Function/Method Declaration&lt;br&gt;
  &lt;font color=SlateGray&gt;&lt;strong&gt;Algorithm&lt;/strong&gt; &lt;em&gt;method(Argument one, Argument two, ...)&lt;/em&gt;&lt;/font&gt;&lt;br&gt;
  &lt;font color=SlateGray&gt;&lt;strong&gt;Input&lt;/strong&gt;&lt;/font&gt; - indicates the input to the algorithm&lt;br&gt;
  &lt;font color=SlateGray&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/font&gt; - indicates the output of the algorithm&lt;/li&gt;
&lt;li&gt;Method Call&lt;br&gt;
  &lt;font color=DarkKhaki&gt;&lt;em&gt;var.method(Argument one, Argument two, ...)&lt;/em&gt;&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;Return Value&lt;br&gt;
  &lt;font color=MediumPurple&gt;&lt;strong&gt;return&lt;/strong&gt; &lt;em&gt;expression&lt;/em&gt;&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Control Flow&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=SteelBlue&gt;&lt;strong&gt;if&lt;/strong&gt; &lt;em&gt;...&lt;/em&gt; &lt;strong&gt;then&lt;/strong&gt; &lt;em&gt;...&lt;/em&gt; &lt;strong&gt;else&lt;/strong&gt; &lt;em&gt;...&lt;/em&gt;&lt;/font&gt; - indicates a decision the algorithm must make, i.e., if a condition is true then do something if the condition is false then do something else&lt;/li&gt;
&lt;li&gt;&lt;font color=SteelBlue&gt;&lt;strong&gt;while&lt;/strong&gt; &lt;em&gt;...&lt;/em&gt; &lt;strong&gt;do&lt;/strong&gt; &lt;em&gt;...&lt;/em&gt;&lt;/font&gt; - indicates a top tested loop, i.e., first evaluate the condition and if the condition evaluates to false, then the looping ends. If the condition evaluates to true, then do one iteration of the loop, then repeat the loop while the condition is true.&lt;/li&gt;
&lt;li&gt;&lt;font color=SteelBlue&gt;&lt;strong&gt;for&lt;/strong&gt; &lt;em&gt;...&lt;/em&gt; &lt;strong&gt;do&lt;/strong&gt; &lt;em&gt;...&lt;/em&gt;&lt;/font&gt; - indicates a loop where we already know how many times the loop will be executed&lt;/li&gt;
&lt;li&gt;&lt;font color=SteelBlue&gt;&lt;strong&gt;repeat&lt;/strong&gt; &lt;em&gt;...&lt;/em&gt; &lt;strong&gt;until&lt;/strong&gt; &lt;em&gt;...&lt;/em&gt;&lt;/font&gt; - indicates a bottom tested loop, i.e., do one iteration of the loop then evaluate the condition. If the condition evaluates to false, then repeat. If the condition evaluates to true, the looping ends.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Expressions&lt;br&gt;
  &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; Assignment&lt;br&gt;
    (like &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;=&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; in Python)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;    &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;=&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; Equality testing&lt;br&gt;
      (like &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;==&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; in Python)&lt;/p&gt;
&lt;p&gt;    &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n^2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8141079999999999em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.8141079999999999em;&quot;&gt;&lt;span style=&quot;top:-3.063em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; Exponentiation&lt;br&gt;
      (like &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n**2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.46528em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;∗&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;∗&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; in Python)&lt;/p&gt;
&lt;p&gt;    &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;≥&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\geq&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.7719400000000001em;vertical-align:-0.13597em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;≥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; greater than or equal to&lt;br&gt;
      (like &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;&amp;gt;=&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.5782em;vertical-align:-0.0391em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; in Python)&lt;/p&gt;
&lt;p&gt;    &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leq&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.7719400000000001em;vertical-align:-0.13597em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;≤&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; less than or equal to&lt;br&gt;
      (like &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;&amp;lt;=&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.5782em;vertical-align:-0.0391em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; in Python)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note (1)&lt;/em&gt;: Other mathematical formatting can appear and the corresponding Python operations can be found in the official documentation.&lt;/p&gt;
&lt;h2&gt;Pseudocode Examples&lt;/h2&gt;
&lt;h3&gt;Ex. 1) Find the maximum element in a list&lt;/h3&gt;
&lt;p&gt;&lt;font color=SlateGray&gt;&lt;strong&gt;Algorithm&lt;/strong&gt; &lt;em&gt;findMax(A)&lt;/em&gt;&lt;br&gt;
  &lt;strong&gt;Input&lt;/strong&gt; list &lt;em&gt;A&lt;/em&gt; of &lt;em&gt;n&lt;/em&gt; integers&lt;br&gt;
  &lt;strong&gt;Output&lt;/strong&gt; the maximum element of &lt;em&gt;A&lt;/em&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;  &lt;font color=CadetBlue&gt;&lt;em&gt;currentMax&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;A[0]&lt;/em&gt;&lt;/font&gt;&lt;br&gt;
  &lt;font color=SteelBlue&gt;&lt;strong&gt;for&lt;/strong&gt; &lt;em&gt;currentValue&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;nextElementInA (starting from the 1st element in A)&lt;/em&gt; &lt;strong&gt;to&lt;/strong&gt; &lt;em&gt;EndOfA&lt;/em&gt; &lt;strong&gt;do&lt;/strong&gt;&lt;/font&gt;&lt;br&gt;
    &lt;font color=SteelBlue&gt;&lt;strong&gt;if&lt;/strong&gt; &lt;em&gt;currentValue &gt; currentMax&lt;/em&gt; &lt;strong&gt;then&lt;/strong&gt;&lt;/font&gt;&lt;br&gt;
      &lt;font color=CadetBlue&gt;&lt;em&gt;currentMax&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;currentValue&lt;/em&gt;&lt;/font&gt;&lt;br&gt;
  &lt;font color=MediumPurple&gt;&lt;strong&gt;return&lt;/strong&gt; &lt;em&gt;currentMax&lt;/em&gt;&lt;/font&gt;&lt;/p&gt;
&lt;h3&gt;Ex. 2) Find the minimum element in a list&lt;/h3&gt;
&lt;p&gt;&lt;font color=SlateGray&gt;&lt;strong&gt;Algorithm&lt;/strong&gt; &lt;em&gt;findMin(A)&lt;/em&gt;&lt;br&gt;
  &lt;strong&gt;Input&lt;/strong&gt; list &lt;em&gt;A&lt;/em&gt; of &lt;em&gt;n&lt;/em&gt; integers&lt;br&gt;
  &lt;strong&gt;Output&lt;/strong&gt; the minimum element of &lt;em&gt;A&lt;/em&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;  &lt;font color=CadetBlue&gt;&lt;em&gt;currentMin&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;A[0]&lt;/em&gt;&lt;/font&gt;&lt;br&gt;
  &lt;font color=SteelBlue&gt;&lt;strong&gt;for&lt;/strong&gt; &lt;em&gt;currentValue&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;nextElementInA (starting from the 1st element in A)&lt;/em&gt; &lt;strong&gt;to&lt;/strong&gt; &lt;em&gt;EndOfA&lt;/em&gt; &lt;strong&gt;do&lt;/strong&gt;&lt;/font&gt;&lt;br&gt;
    &lt;font color=SteelBlue&gt;&lt;strong&gt;if&lt;/strong&gt; &lt;em&gt;currentValue &amp;#x3C; currentMin&lt;/em&gt; &lt;strong&gt;then&lt;/strong&gt;&lt;/font&gt;&lt;br&gt;
      &lt;font color=CadetBlue&gt;&lt;em&gt;currentMin&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;currentValue&lt;/em&gt;&lt;/font&gt;&lt;br&gt;
  &lt;font color=MediumPurple&gt;&lt;strong&gt;return&lt;/strong&gt; &lt;em&gt;currentMin&lt;/em&gt;&lt;/font&gt;&lt;/p&gt;
&lt;h3&gt;Ex. 3) Sum all of the elements in a list&lt;/h3&gt;
&lt;p&gt;&lt;font color=SlateGray&gt;&lt;strong&gt;Algorithm&lt;/strong&gt; &lt;em&gt;calculateSum(A)&lt;/em&gt;&lt;br&gt;
  &lt;strong&gt;Input&lt;/strong&gt; list &lt;em&gt;A&lt;/em&gt; of &lt;em&gt;n&lt;/em&gt; integers&lt;br&gt;
  &lt;strong&gt;Output&lt;/strong&gt; sum of all the elements of &lt;em&gt;A&lt;/em&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;  &lt;font color=CadetBlue&gt;&lt;em&gt;currentSum&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;0&lt;/em&gt;&lt;/font&gt;&lt;br&gt;
  &lt;font color=SteelBlue&gt;&lt;strong&gt;for&lt;/strong&gt; &lt;em&gt;valueToBeAdded&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;nextElementInA (starting from the 1st element in A)&lt;/em&gt; &lt;strong&gt;to&lt;/strong&gt; &lt;em&gt;EndOfA&lt;/em&gt; &lt;strong&gt;do&lt;/strong&gt;&lt;/font&gt;&lt;br&gt;
    &lt;font color=CadetBlue&gt;&lt;em&gt;currentSum&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;currentSum + valueToBeAdded&lt;/em&gt;&lt;/font&gt;&lt;br&gt;
  &lt;font color=MediumPurple&gt;&lt;strong&gt;return&lt;/strong&gt; &lt;em&gt;currentSum&lt;/em&gt;&lt;/font&gt;&lt;/p&gt;
&lt;h3&gt;Ex. 4) Multiply all of the elements in a list&lt;/h3&gt;
&lt;p&gt;&lt;font color=SlateGray&gt;&lt;strong&gt;Algorithm&lt;/strong&gt; &lt;em&gt;calculateProduct(A)&lt;/em&gt;&lt;br&gt;
  &lt;strong&gt;Input&lt;/strong&gt; list &lt;em&gt;A&lt;/em&gt; of &lt;em&gt;n&lt;/em&gt; integers&lt;br&gt;
  &lt;strong&gt;Output&lt;/strong&gt; multiplication of all the elements of &lt;em&gt;A&lt;/em&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;  &lt;font color=CadetBlue&gt;&lt;em&gt;currentProduct&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;1&lt;/em&gt;&lt;/font&gt;&lt;br&gt;
  &lt;font color=SteelBlue&gt;&lt;strong&gt;for&lt;/strong&gt; &lt;em&gt;multiplier&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;nextElementInA (starting from the 1st element in A)&lt;/em&gt; &lt;strong&gt;to&lt;/strong&gt; &lt;em&gt;EndOfA&lt;/em&gt; &lt;strong&gt;do&lt;/strong&gt;&lt;/font&gt;&lt;br&gt;
    &lt;font color=CadetBlue&gt;&lt;em&gt;currentProduct&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; _currentProduct _ multiplier&lt;em&gt;&lt;/font&gt;&lt;br&gt;
  &lt;font color=MediumPurple&gt;&lt;strong&gt;return&lt;/strong&gt; *currentProduct\&lt;/em&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note (2)&lt;/em&gt;: Since the purpose of these examples is to familiarize us with writing pseudocode, the suggested implementations are not optimized.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Changing remote Git repo]]></title><description><![CDATA[List current remote Change remote Git repo ( NOTE ) Replace everything inside  with your data and remove the  characters]]></description><link>https://www.chrisatmachine.com/Git/02-change-remote-git-repo/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Git/02-change-remote-git-repo/</guid><pubDate>Sat, 18 Jul 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;List current remote&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      git remote -v
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Change remote Git repo&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      git remote set-url origin git@&lt;your.git.repo.example.com&gt;:&lt;user&gt;/&lt;repository2.git&gt;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;( &lt;strong&gt;NOTE&lt;/strong&gt; )&lt;/p&gt;
&lt;p&gt;Replace everything inside &lt;code class=&quot;language-text&quot;&gt;&amp;lt;&amp;gt;&lt;/code&gt; with your data and remove the &lt;code class=&quot;language-text&quot;&gt;&amp;lt;&amp;gt;&lt;/code&gt; characters&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Installing DWM]]></title><description><![CDATA[Make sure you have a user already Install Xorg Install git Install a browser Create a config directory Install DWM Installing a Display…]]></description><link>https://www.chrisatmachine.com/Linux/07-dwm/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Linux/07-dwm/</guid><pubDate>Sat, 11 Jul 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Make sure you have a user already&lt;/p&gt;
&lt;h2&gt;Install Xorg&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      pacman -S xorg-server xorg-xinit xorg-xrandr xorg-xsetroot
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Install git&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      pacman -S git
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Install a browser&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      pacman -S firefox
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Create a config directory&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      mkdir ~/.config
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Install DWM&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      git clone git://git.suckless.org/dwm ~/.config/dwm
git clone git://git.suckless.org/st ~/.config/st
git clone git://git.suckless.org/dmenu ~/.config/dmenu
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      cd ~/.config/dwm &amp;&amp; sudo make install
cd ~/.config/st &amp;&amp; sudo make install
cd ~/.config/dmenu &amp;&amp; sudo make install
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Installing a Display Manager (DM)&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      pacman -S lightdm

pacman -S lightdm-gtk-greeter

pacman -S lightdm-gtk-greeter-settings
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Enable lightdm service&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      sudo systemctl enable lightdm
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Adding an entry for DWM in the DM&lt;/h2&gt;
&lt;p&gt;Open this file:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      mkdir /usr/share/xsessions

vim /usr/share/xsessions/dwm.desktop
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Add the following:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      [Desktop Entry]
Encoding=UTF-8
Name=Dwm
Comment=the dynamic window manager
Exec=dwm
Icon=dwm
Type=XSession
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Basic Commands&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Moving between windows: &lt;code class=&quot;language-text&quot;&gt;[Alt]+[j] or [Alt]+[k]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To move a terminal to another tag: &lt;code class=&quot;language-text&quot;&gt;[Shift]+[Alt]+[&amp;lt;TAG_NUMBER&amp;gt;]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To focus on another tag: &lt;code class=&quot;language-text&quot;&gt;[Alt]+[tag number]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To change the amount of windows in the master area: &lt;code class=&quot;language-text&quot;&gt;[Alt]+[d] (Decrease) or [Alt]+[i] (Increase)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To toggle a window between the master and stack area: &lt;code class=&quot;language-text&quot;&gt;[Alt]+[Return]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To kill a window: &lt;code class=&quot;language-text&quot;&gt;[Shift]+[Alt]+[c]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Click another tag with the right mouse button to bring those windows into your current focus.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Layouts&lt;/h2&gt;
&lt;p&gt;( &lt;strong&gt;Note&lt;/strong&gt; ) By default dwm is in tiled layout mode.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tiled: &lt;code class=&quot;language-text&quot;&gt;[Alt]+[t]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Floating: &lt;code class=&quot;language-text&quot;&gt;[Alt]+[f]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Monocle: &lt;code class=&quot;language-text&quot;&gt;[Alt]+[m]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Further layout modes can be included through patches.&lt;/p&gt;
&lt;h2&gt;Floating&lt;/h2&gt;
&lt;p&gt;To resize the floating window: &lt;code class=&quot;language-text&quot;&gt;[Alt]+[right mouse button]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To move it around &lt;code class=&quot;language-text&quot;&gt;[Alt]+[left mouse button]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Floating in Tiled Layout&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Toggle floating mode on the active window: &lt;code class=&quot;language-text&quot;&gt;[Alt]+[Shift]+[space]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Resize the window: &lt;code class=&quot;language-text&quot;&gt;[Alt]+[right mouse button]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;toggle it in being floating &lt;code class=&quot;language-text&quot;&gt;[Alt]+[middle mouse button]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to set some type of window to be always floating, look at the config.def.h and the rules array, where the last but one element defines this behaviour.&lt;/p&gt;
&lt;h2&gt;Quitting&lt;/h2&gt;
&lt;p&gt;To quit dwm cleanly: &lt;code class=&quot;language-text&quot;&gt;[Shift]+[Alt]+[q]&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Status&lt;/h2&gt;
&lt;p&gt;By default dwm is showing dwm-X.X in its statusbar. This text can be changed by setting the WM_NAME property of the root window.&lt;/p&gt;
&lt;p&gt;Using the tools of X.org, this can be set using:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      xsetroot -name &quot;Some Text&quot;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  </content:encoded></item><item><title><![CDATA[Discovering extensions with coc-marketplace]]></title><description><![CDATA[What is coc-marketplace? This extension is a marketplace for all other coc-extensions Note You will need to have CoC installed I have a blog…]]></description><link>https://www.chrisatmachine.com/Neovim/19-coc-marketplace/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Neovim/19-coc-marketplace/</guid><pubDate>Thu, 11 Jun 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;What is coc-marketplace?&lt;/h2&gt;
&lt;p&gt;This extension is a marketplace for all other coc-extensions&lt;/p&gt;
&lt;h3&gt;Note&lt;/h3&gt;
&lt;p&gt;You will need to have CoC installed I have a blog post and video for installing CoC here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=OXEVhnY621M&quot;&gt;YouTube Video&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.chrisatmachine.com/Neovim/04-vim-coc/&quot;&gt;Blog Post&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :CocInstall coc-marketplace
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Commands&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :CocList marketplace
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Repo Links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/fannheyward/coc-marketplace&quot;&gt;coc-marketplace&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Codi - An Interactive Scratchpad for Hackers]]></title><description><![CDATA[What is Codi? Codi is an interactive scratchpad for hackers. It opens virtual text which displays the results of evaluating each line as you…]]></description><link>https://www.chrisatmachine.com/Neovim/18-codi/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Neovim/18-codi/</guid><pubDate>Tue, 26 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;What is Codi?&lt;/h2&gt;
&lt;p&gt;Codi is an interactive scratchpad for hackers. It opens virtual text which displays the results of evaluating each line as you type with NeoVim asynchronously. It&apos;s extensible to nearly any language that provides a REPL (interactive interpreter)!&lt;/p&gt;
&lt;p&gt;REPL = (Read-eval-print loop)&lt;/p&gt;
&lt;p&gt;Languages with built-in support: Python, JavaScript, CoffeeScript, Haskell, PureScript, Ruby, OCaml, R, Clojure/ClojureScript, PHP, Lua, C++, Julia, Elm, Elixir, TypeScript, Mathjs&lt;/p&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Updated Version with Virtual text&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      Plug &apos;ChristianChiarulli/codi.vim&apos;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Original&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      Plug &apos;metakirby5/codi.vim&apos;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Version with Virtual Text&lt;/p&gt;
&lt;p&gt;The code for this can be found &lt;a href=&quot;https://github.com/Pablo1107/codi.vim/tree/nvim-virtual-text&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Config&lt;/h2&gt;
&lt;p&gt;Here is some simple config to get you started&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      &quot; Change the color
highlight CodiVirtualText guifg=cyan

let g:codi#virtual_text_prefix = &quot;❯ &quot;


&quot;
let g:codi#aliases = {
                   \ &apos;javascript.jsx&apos;: &apos;javascript&apos;,
                   \ }
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Commands&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :Codi {filetype}   # Open codi for a specific filetype

:Codi!             # Closes Codi Apparently doesn&apos;t work

:Codi!!            # Toggle Codi Apparently doesn&apos;t work
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Shell Wrapper&lt;/h2&gt;
&lt;p&gt;Add this to your &lt;code class=&quot;language-text&quot;&gt;bashrc&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;zshrc&lt;/code&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      codi() {
   local syntax=&quot;${1:-python}&quot;
   shift
   nvim -c \
     &quot;let g:startify_disable_at_vimenter = 1 |\
     set bt=nofile ls=0 noru nonu nornu |\
     hi CodiVirtualText guifg=red
     hi ColorColumn ctermbg=NONE |\
     hi VertSplit ctermbg=NONE |\
     hi NonText ctermfg=0 |\
     Codi $syntax&quot; &quot;$@&quot;
}
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;This plugin has been a little buggy but I still find it very useful.&lt;/p&gt;
&lt;p&gt;The maintainer and the guy who forked it and added virtual text don&apos;t seem to be very active.&lt;/p&gt;
&lt;p&gt;I have a fork on my Github for now with the updates from both.&lt;/p&gt;
&lt;p&gt;I don&apos;t plan on maintaining it or adding features.&lt;/p&gt;
&lt;p&gt;Hopefully they update it soon.&lt;/p&gt;
&lt;h2&gt;Repo Links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Pablo1107/codi.vim/tree/nvim-virtual-text&quot;&gt;Original&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Pablo1107/codi.vim/tree/nvim-virtual-text&quot;&gt;Virtual text fork&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=iGrUvcQyfhc&quot;&gt;YouTube video where I found this&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ChristianChiarulli/codi.vim&quot;&gt;My fork&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Installing Nerd Fonts]]></title><description><![CDATA[What are Nerd Fonts? From the repo: "Nerd Fonts is a project that patches developer targeted fonts with a high number of glyphs (icons…]]></description><link>https://www.chrisatmachine.com/Linux/05-nerd-fonts/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Linux/05-nerd-fonts/</guid><pubDate>Sat, 23 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;What are Nerd Fonts?&lt;/h2&gt;
&lt;p&gt;From the repo:&lt;/p&gt;
&lt;p&gt;&quot;Nerd Fonts is a project that patches developer targeted fonts with a high number of glyphs (icons). Specifically to add a high number of extra glyphs from popular &apos;iconic fonts&apos; such as Font Awesome ➶, Devicons ➶, Octicons ➶, and others.&quot;&lt;/p&gt;
&lt;h2&gt;Installing a font&lt;/h2&gt;
&lt;p&gt;There are a number of ways to do this listed on the repo, out of those options I think two are really useful.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Manual install&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Go to the patched font directory, choose your font, download and install into &lt;code class=&quot;language-text&quot;&gt;~/.local/share/fonts&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Curl Download&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Another good option for writing your own script is to use the &lt;code class=&quot;language-text&quot;&gt;curl&lt;/code&gt; command to download the font like this:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      mkdir -p ~/.local/share/fonts
cd ~/.local/share/fonts &amp;&amp; curl -fLo &quot;Fira Code Regular Nerd Font Complete.otf&quot; https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/FiraCode/Regular/complete/Fira%20Code%20Regular%20Nerd%20Font%20Complete.otf
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;ttf vs otf&lt;/h2&gt;
&lt;p&gt;otf is a newer standard based on ttf, when given the option you should generally choose otf.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.makeuseof.com/tag/otf-vs-ttf-fonts-one-better/&quot;&gt;here&lt;/a&gt; is a good article explaining the difference.&lt;/p&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ryanoasis/nerd-fonts&quot;&gt;Nerd Font Repo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.nerdfonts.com/&quot;&gt;Nerd Font Website&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Alacritty GPU Accelerated Terminal Emulator]]></title><description><![CDATA[What is Alacritty? Alacritty bills itself as the fastest terminal emulator in existence. From the repo: "Using the GPU for rendering enables…]]></description><link>https://www.chrisatmachine.com/Linux/06-alacritty/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Linux/06-alacritty/</guid><pubDate>Sat, 23 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;What is Alacritty?&lt;/h2&gt;
&lt;p&gt;Alacritty bills itself as the fastest terminal emulator in existence.&lt;/p&gt;
&lt;p&gt;From the repo:&lt;/p&gt;
&lt;p&gt;&quot;Using the GPU for rendering enables optimizations that simply aren&apos;t possible without it. Alacritty currently supports macOS, Linux, BSD, and Windows.&quot;&lt;/p&gt;
&lt;h2&gt;Installing Alacritty&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mac&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      brew install --cask alacritty
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ubuntu&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      sudo apt install alacritty
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Arch&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      sudo pacman -S alacritty
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      choco install alacritty
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Configure&lt;/h2&gt;
&lt;p&gt;Add a config file since Alacritty doesn&apos;t create one for you&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On Linux and Mac&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      ~/.config/alacritty/alacritty.yml
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On Windows&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      %APPDATA%\alacritty\alacritty.yml
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Example Config&lt;/h3&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      colors:
  # Default colors
  primary:
    background: &quot;#1e2127&quot;
    # background: &quot;#2E3440&quot;
    foreground: &quot;#D8DEE9&quot;

  # Normal colors
  normal:
    black: &quot;#3B4252&quot;
    red: &quot;#BF616A&quot;
    green: &quot;#A3BE8C&quot;
    yellow: &quot;#EBCB8B&quot;
    blue: &quot;#81A1C1&quot;
    magenta: &quot;#B48EAD&quot;
    cyan: &quot;#88C0D0&quot;
    white: &quot;#abb2bf&quot;

  # Bright colors
  bright:
    black: &quot;#5c6370&quot;
    red: &quot;#e06c75&quot;
    green: &quot;#98c379&quot;
    yellow: &quot;#d19a66&quot;
    blue: &quot;#61afef&quot;
    magenta: &quot;#c678dd&quot;
    cyan: &quot;#56b6c2&quot;
    white: &quot;#ECEFF4&quot;

background_opacity: 1.0

font:
  normal:
    family: &quot;Hack&quot;
    style: Regular
  bold:
    family: &quot;Hack&quot;
    style: Bold
  italic:
    family: &quot;Hack&quot;
    style: Italic
  bold_italic:
    family: &quot;Hack&quot;
    style: Bold Italic

  # Point size
  size: 22.0

  offset:
    x: 0
    y: 0
  glyph_offset:
    x: 0
    y: 0

window:
  padding:
    x: 2
    y: 2

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying &apos;0&apos; will disable scrolling.
  history: 10000

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history &gt; 0).
  multiplier: 10

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: true

selection:
  semantic_escape_chars: &apos;,│`|:&quot;&apos;&apos; ()[]{}&lt;&gt;&apos;
  save_to_clipboard: true

live_config_reload: true

key_bindings:
  - { key: V, mods: Control|Shift, action: Paste }
  - { key: C, mods: Control|Shift, action: Copy }
  - { key: Key0, mods: Control, action: ResetFontSize }
  - { key: Equals, mods: Control, action: IncreaseFontSize }
  - { key: Add, mods: Control, action: IncreaseFontSize }
  - { key: Subtract, mods: Control, action: DecreaseFontSize }
  - { key: Minus, mods: Control, action: DecreaseFontSize }
  - { key: N, mods: Control, action: SpawnNewInstance }
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Proving it runs on the GPU&lt;/h2&gt;
&lt;p&gt;If you&apos;re running nvidia you check using the following command&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      watch -n -1 nvidia-smi
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/alacritty/alacritty&quot;&gt;Repo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/alacritty/alacritty/wiki/Color-schemes&quot;&gt;Color Schemes&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Snippets with CoC]]></title><description><![CDATA[Install Make sure you install CoC, I have a video for that here After setting up CoC you can install with: Config You can create a config…]]></description><link>https://www.chrisatmachine.com/Neovim/17-snippets/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Neovim/17-snippets/</guid><pubDate>Fri, 22 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Install&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      Plug &apos;honza/vim-snippets&apos;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Make sure you install CoC, I have a video for that &lt;a href=&quot;https://www.youtube.com/watch?v=OXEVhnY621M&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After setting up CoC you can install with:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :CocInstall coc-snippets
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Config&lt;/h2&gt;
&lt;p&gt;You can create a config file and add the following:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      &quot; Use &lt;C-l&gt; for trigger snippet expand.
imap &lt;C-l&gt; &lt;Plug&gt;(coc-snippets-expand)

&quot; Use &lt;C-j&gt; for select text for visual placeholder of snippet.
vmap &lt;C-j&gt; &lt;Plug&gt;(coc-snippets-select)

&quot; Use &lt;C-j&gt; for jump to next placeholder, it&apos;s default of coc.nvim
let g:coc_snippet_next = &apos;&lt;c-j&gt;&apos;

&quot; Use &lt;C-k&gt; for jump to previous placeholder, it&apos;s default of coc.nvim
let g:coc_snippet_prev = &apos;&lt;c-k&gt;&apos;

&quot; Use &lt;C-j&gt; for both expand and jump (make expand higher priority.)
imap &lt;C-j&gt; &lt;Plug&gt;(coc-snippets-expand-jump)
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Add your own snippets&lt;/h2&gt;
&lt;p&gt;Edit coc-settings.json and add the following:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      &quot;snippets.userSnippetsDirectory&quot;: &quot;~/.config/nvim/snips&quot;,
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;After that you can add a file like this:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      mkdir ~/.config/nvim/snips

touch ~/.config/nvim/snips/markdown.snippets # &lt;- doesn&apos;t have to be called markdown
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Commands&lt;/h2&gt;
&lt;p&gt;You&apos;ll be able to notice it&apos;s a snippet from the &lt;code class=&quot;language-text&quot;&gt;~&lt;/code&gt; character&lt;/p&gt;
&lt;p&gt;Auto complete should feel very familiar, refer to the earlier bindings you set.&lt;/p&gt;
&lt;p&gt;To list all snippets for a current file:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :CocList snippets

:CocCommand snippets.editSnippets

:CocCommand snippets.openSnippetFiles
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Repo Links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/neoclide/coc-snippets&quot;&gt;coc-snippets&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/honza/vim-snippets&quot;&gt;honza/vim-snippets&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Primitive Operations]]></title><description><![CDATA[What is a Primitive Operation? A basic computation performed by an algorithm Identifiable in pseudocode Largely independent from the…]]></description><link>https://www.chrisatmachine.com/DSAndAlgos/02-Primitive_Operations/</link><guid isPermaLink="false">https://www.chrisatmachine.com/DSAndAlgos/02-Primitive_Operations/</guid><pubDate>Tue, 19 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;What is a Primitive Operation?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;font color=Red&gt;basic&lt;/font&gt; computation performed by an algorithm&lt;/li&gt;
&lt;li&gt;&lt;font color=Red&gt;Identifiable&lt;/font&gt; in pseudocode&lt;/li&gt;
&lt;li&gt;Largely &lt;font color=Red&gt;independent&lt;/font&gt; from the programming language being used&lt;/li&gt;
&lt;li&gt;&lt;font color=Red&gt;Assumed&lt;/font&gt; to have a constant execution time&lt;/li&gt;
&lt;li&gt;&lt;font color=Red&gt;Exact&lt;/font&gt; definition is not important&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Note (1)&lt;/em&gt;: As long as we correctly identify the growth rate of the algorithm, the exact definition of a primitive operation is not important since we can model the behavior of the alogrithm by using asymptotic analysis which we&apos;ll discuss how to do in a future notebook.&lt;/p&gt;
&lt;h2&gt;Examples of Primitive Operations&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Primitive Operation&lt;/th&gt;
&lt;th&gt;Pseudocode Example&lt;/th&gt;
&lt;th&gt;Equivalent Python Code&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;center&gt;Assigning a value to a variable&lt;/center&gt;&lt;/td&gt;
&lt;td&gt;&lt;center&gt;&lt;em&gt;x&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;5&lt;/em&gt;&lt;/center&gt;&lt;/td&gt;
&lt;td&gt;&lt;center&gt;&lt;em&gt;x = 5&lt;/em&gt;&lt;/center&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;center&gt;Performing an arithmetic operation&lt;/center&gt;&lt;/td&gt;
&lt;td&gt;&lt;center&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;/&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;a^3 + b/2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.897438em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.8141079999999999em;&quot;&gt;&lt;span style=&quot;top:-3.063em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/center&gt;&lt;/td&gt;
&lt;td&gt;&lt;center&gt;&lt;em&gt;a**3 + b/2&lt;/em&gt;&lt;/center&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;center&gt;Comparing two numbers&lt;/center&gt;&lt;/td&gt;
&lt;td&gt;&lt;center&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;≥&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;i \geq j&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.79549em;vertical-align:-0.13597em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;≥&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.85396em;vertical-align:-0.19444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.05724em;&quot;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/center&gt;&lt;/td&gt;
&lt;td&gt;&lt;center&gt;&lt;em&gt;i &gt;= j&lt;/em&gt;&lt;/center&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;center&gt;Accessing a single element in a Python list by index&lt;/center&gt;&lt;/td&gt;
&lt;td&gt;&lt;center&gt;&lt;em&gt;A[0]&lt;/em&gt;&lt;/center&gt;&lt;/td&gt;
&lt;td&gt;&lt;center&gt;&lt;em&gt;A[0]&lt;/em&gt;&lt;/center&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;center&gt;Calling a function/method&lt;/center&gt;&lt;/td&gt;
&lt;td&gt;&lt;center&gt;&lt;em&gt;findMax(A)&lt;/em&gt;&lt;/center&gt;&lt;/td&gt;
&lt;td&gt;&lt;center&gt;&lt;em&gt;findMax(A)&lt;/em&gt;&lt;/center&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;center&gt;Returning from a function/method&lt;/center&gt;&lt;/td&gt;
&lt;td&gt;&lt;center&gt;&lt;em&gt;return y&lt;/em&gt;&lt;/center&gt;&lt;/td&gt;
&lt;td&gt;&lt;center&gt;&lt;em&gt;return y&lt;/em&gt;&lt;/center&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;Note (2)&lt;/em&gt;: Calling a function/method excludes operations executed within the function/method.&lt;/p&gt;
&lt;h2&gt;Focusing on Worst-Case Input&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An algorithm might run faster on some inputs than other inputs even if the inputs being compared are the same size.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For example, finding the smallest number in a list of size, &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.43056em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, that has been sorted in inreasing order vs finding the smallest number in a list of size, &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.43056em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, that is sorted randomly.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;To factor in this possibilty we can perform an &lt;font color=Red&gt;average-case analysis&lt;/font&gt; by taking the average of the running time over all possible inputs of the same size.&lt;/li&gt;
&lt;li&gt;Average-case analysis is very useful, but often &lt;font color=Red&gt;difficult to determine&lt;/font&gt; since it requires defining a probability distribution over the set of inputs.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Therefore, we&apos;ll focus on charaterizing the running time of an algorithm using &lt;font color=Red&gt;worst-case analysis&lt;/font&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=Red&gt;Easier&lt;/font&gt; to calculate since we only need to &lt;font color=Red&gt;identify the worst-case input&lt;/font&gt;.&lt;/li&gt;
&lt;li&gt;Also, designing for the worst-case leads to the algorithm &lt;font color=Red&gt;doing well on every input&lt;/font&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Note (3)&lt;/em&gt;: Focusing on the best-case input is usually useless since it requires ideal conditions for the algorithm to perform in an acceptable manner.&lt;/p&gt;
&lt;h2&gt;Counting Primitive Operations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To determine the running time, &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;t&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.61508em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, of an algorithm as a function of the input size, &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.43056em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, we need to perform the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Identify each primitive operation in the pseudocode&lt;/li&gt;
&lt;li&gt;Count how many times each primitive operation is executed&lt;/li&gt;
&lt;li&gt;Calculate the running time by summing the counts of primitive operations&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Note (4)&lt;/em&gt;: We&apos;re assuming the running times of different primitive operations will be fairly similar, so the calculated running time, &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;t&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.61508em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, will be proportional to the actual running time of an algorithm.&lt;/p&gt;
&lt;h2&gt;Counting Primitive Operations Examples&lt;/h2&gt;
&lt;h3&gt;Ex. 1) Find the maximum element in a list&lt;/h3&gt;
&lt;p&gt;&lt;font color=SlateGray&gt;&lt;strong&gt;Algorithm&lt;/strong&gt; &lt;em&gt;findMax(A)&lt;/em&gt;&lt;br&gt;
  &lt;strong&gt;Input&lt;/strong&gt; list &lt;em&gt;A&lt;/em&gt; of &lt;em&gt;n&lt;/em&gt; integers&lt;br&gt;
  &lt;strong&gt;Output&lt;/strong&gt; the maximum element of &lt;em&gt;A&lt;/em&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;  &lt;font color=CadetBlue&gt;&lt;em&gt;currentMax&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;A[0]&lt;/em&gt;&lt;/font&gt;&lt;br&gt;
  &lt;font color=SteelBlue&gt;&lt;strong&gt;for&lt;/strong&gt; &lt;em&gt;currentValue&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;nextElementInA (starting from the 1st element in A)&lt;/em&gt; &lt;strong&gt;to&lt;/strong&gt; &lt;em&gt;EndOfA&lt;/em&gt; &lt;strong&gt;do&lt;/strong&gt;&lt;/font&gt;&lt;br&gt;
    &lt;font color=SteelBlue&gt;&lt;strong&gt;if&lt;/strong&gt; &lt;em&gt;currentValue &gt; currentMax&lt;/em&gt; &lt;strong&gt;then&lt;/strong&gt;&lt;/font&gt;&lt;br&gt;
      &lt;font color=CadetBlue&gt;&lt;em&gt;currentMax&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;currentValue&lt;/em&gt;&lt;/font&gt;&lt;br&gt;
  &lt;font color=MediumPurple&gt;&lt;strong&gt;return&lt;/strong&gt; &lt;em&gt;currentMax&lt;/em&gt;&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Line 1, &lt;font color=CadetBlue&gt;&lt;em&gt;currentMax&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;A[0]&lt;/em&gt;&lt;/font&gt;, is &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; operations since we&apos;re accessing a single element in a list by index and assigning a value to a variable.&lt;/li&gt;
&lt;li&gt;Line 2, &lt;font color=SteelBlue&gt;&lt;strong&gt;for&lt;/strong&gt; &lt;em&gt;currentValue&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;nextElementInA (starting from the 1st element in A)&lt;/em&gt; &lt;strong&gt;to&lt;/strong&gt; &lt;em&gt;EndOfA&lt;/em&gt; &lt;strong&gt;do&lt;/strong&gt;&lt;/font&gt;, is &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;c_1 + c_2n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.73333em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.58056em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; operations where &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;c_1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.58056em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; represents the constant number of primitive operations associated with the initializing and the terminating of the for loop, and &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;c_2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.58056em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; represents the number of primitive operations associated with the maintenance of the iterator which is done &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.43056em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; times, so the total amount of maintenance of the iterator is &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;c_2n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.58056em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; (see &lt;em&gt;Note (5)&lt;/em&gt; for why specific values for &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;c_1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.58056em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; and &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;c_2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.58056em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; are not given).&lt;/li&gt;
&lt;li&gt;Line 3, &lt;font color=SteelBlue&gt;&lt;strong&gt;if&lt;/strong&gt; &lt;em&gt;currentValue &gt; currentMax&lt;/em&gt; &lt;strong&gt;then&lt;/strong&gt;&lt;/font&gt;, is &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.43056em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; operations since we&apos;re comparing two numbers during each iteration of the loop.&lt;/li&gt;
&lt;li&gt;Line 4, &lt;font color=CadetBlue&gt;&lt;em&gt;currentMax&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;currentValue&lt;/em&gt;&lt;/font&gt;, consists of &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.43056em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; operations, since we&apos;re assuming worst-case input which means &lt;em&gt;currentMax&lt;/em&gt; will be updated on each iteration of the loop.&lt;/li&gt;
&lt;li&gt;Line 5, &lt;font color=MediumPurple&gt;&lt;strong&gt;return&lt;/strong&gt; &lt;em&gt;currentMax&lt;/em&gt;&lt;/font&gt;, consists of &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; operation since we&apos;re only returning a value from a function.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Therefore, the running time of the algorithm is:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;t = 2 + c_1 + c_2n + n + n + 1 = 3 + c_1 + c_2n + 2n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.61508em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.72777em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.73333em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.73333em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.66666em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.66666em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.72777em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.73333em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.73333em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note (5)&lt;/em&gt;: Explicit values for &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;c_1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.58056em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; and &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;c_2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.58056em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; are not given because the number of primitive operations being executed in a Python for loop, e.g., &lt;em&gt;for i in list&lt;/em&gt; is not as obvious as say a C-style for loop, e.g., &lt;em&gt;for(i = 0; i &amp;#x3C; 10; i++)&lt;/em&gt; since the implementation details are being abstracted away to allow for easier readability and usability. Python for loops are referred to as collection-based or iterator-based loops and use the concept of iterables and iterators to perform the looping operation as opposed to the index based approach used in C-style loops. Under the hood Python is actually using two built-in functions &lt;em&gt;iter()&lt;/em&gt; and &lt;em&gt;next()&lt;/em&gt; to implement the for loop which we can discuss in more detail in a future blog post and video.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note (6)&lt;/em&gt;: Not knowing the exact values for &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;c_1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.58056em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; and &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;c_2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.58056em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; is also not entirely necessary because as mentioned earlier we can use asymptotic analysis to model the behavior of our algorithms as long as we correctly identify the growth rate.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note (7)&lt;/em&gt;: Even though we&apos;ll ultimately be using asymptotic analysis to model our algorithms if you&apos;re interested in examining the primitive operations being executed in a Python program in more detail you can use the &lt;em&gt;dis&lt;/em&gt; module which is the disassembler for Python bytecode. This allows us to examine the set of instructions used by the Python virtual machine. A .pyc file is actually the compliled bytecode. However, for our purposes we don&apos;t need to concern ourselves with all of the under the hood details. If anyone is interested though we can also make a future blog post or video discussing the &lt;em&gt;dis&lt;/em&gt; module in more detail.&lt;/p&gt;
&lt;h3&gt;Ex. 2) Sum all of the elements in a list&lt;/h3&gt;
&lt;p&gt;&lt;font color=SlateGray&gt;&lt;strong&gt;Algorithm&lt;/strong&gt; &lt;em&gt;calculateSum(A)&lt;/em&gt;&lt;br&gt;
  &lt;strong&gt;Input&lt;/strong&gt; list &lt;em&gt;A&lt;/em&gt; of &lt;em&gt;n&lt;/em&gt; integers&lt;br&gt;
  &lt;strong&gt;Output&lt;/strong&gt; sum of all the elements of &lt;em&gt;A&lt;/em&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;  &lt;font color=CadetBlue&gt;&lt;em&gt;currentSum&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;0&lt;/em&gt;&lt;/font&gt;&lt;br&gt;
  &lt;font color=SteelBlue&gt;&lt;strong&gt;for&lt;/strong&gt; &lt;em&gt;valueToBeAdded&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;nextElementInA (starting from the 1st element in A)&lt;/em&gt; &lt;strong&gt;to&lt;/strong&gt; &lt;em&gt;EndOfA&lt;/em&gt; &lt;strong&gt;do&lt;/strong&gt;&lt;/font&gt;&lt;br&gt;
    &lt;font color=CadetBlue&gt;&lt;em&gt;currentSum&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;currentSum + valueToBeAdded&lt;/em&gt;&lt;/font&gt;&lt;br&gt;
  &lt;font color=MediumPurple&gt;&lt;strong&gt;return&lt;/strong&gt; &lt;em&gt;currentSum&lt;/em&gt;&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Line 1, &lt;font color=CadetBlue&gt;&lt;em&gt;currentSum&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;0&lt;/em&gt;&lt;/font&gt;, is &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; operation since we&apos;re assigning a value to a variable.&lt;/li&gt;
&lt;li&gt;Line 2, &lt;font color=SteelBlue&gt;&lt;strong&gt;for&lt;/strong&gt; &lt;em&gt;valueToBeAdded&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;nextElementInA (starting from the 1st element in A)&lt;/em&gt; &lt;strong&gt;to&lt;/strong&gt; &lt;em&gt;EndOfA&lt;/em&gt; &lt;strong&gt;do&lt;/strong&gt;&lt;/font&gt;, is once again &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;c_1 + c_2n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.73333em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.58056em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; operations where &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;c_1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.58056em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; once again represents the constant number of primitive operations associated with the initializing and the terminating of the for loop, and &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;c_2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.58056em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; once again represents the number of primitive operations associated with the maintenance of the iterator which is done &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.43056em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; times, so the total amount of maintenance of the iterator is &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;c_2n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.58056em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Line 3, &lt;font color=CadetBlue&gt;&lt;em&gt;currentSum&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;currentSum + valueToBeAdded&lt;/em&gt;&lt;/font&gt;, is &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;2n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; operations since we&apos;re performing an arithmetic operation and assigning the result to a variable during each iteration of the loop.&lt;/li&gt;
&lt;li&gt;Line 4, &lt;font color=MediumPurple&gt;&lt;strong&gt;return&lt;/strong&gt; &lt;em&gt;currentSum&lt;/em&gt;&lt;/font&gt;, consists of &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; operation since we&apos;re only returning a value from a function.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Therefore, the running time of the algorithm is:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;t = 1 + c_1 + c_2n + 2n + 1 = 2 + c_1 + c_2n + 2n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.61508em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.72777em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.73333em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.73333em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.72777em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.72777em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.73333em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.73333em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;Ex. 3) Calculate the average of the elements in a list&lt;/h3&gt;
&lt;p&gt;&lt;font color=SlateGray&gt;&lt;strong&gt;Algorithm&lt;/strong&gt; &lt;em&gt;calculateAverage(A)&lt;/em&gt;&lt;br&gt;
  &lt;strong&gt;Input&lt;/strong&gt; list &lt;em&gt;A&lt;/em&gt; of &lt;em&gt;n&lt;/em&gt; integers&lt;br&gt;
  &lt;strong&gt;Output&lt;/strong&gt; average of all the elements of &lt;em&gt;A&lt;/em&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;  &lt;font color=CadetBlue&gt;&lt;em&gt;currentSum&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;0&lt;/em&gt;&lt;/font&gt;&lt;br&gt;
  &lt;font color=SteelBlue&gt;&lt;strong&gt;for&lt;/strong&gt; &lt;em&gt;valueToBeAdded&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;nextElementInA (starting from the 1st element in A)&lt;/em&gt; &lt;strong&gt;to&lt;/strong&gt; &lt;em&gt;EndOfA&lt;/em&gt; &lt;strong&gt;do&lt;/strong&gt;&lt;/font&gt;&lt;br&gt;
    &lt;font color=CadetBlue&gt;&lt;em&gt;currentSum&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;currentSum + valueToBeAdded&lt;/em&gt;&lt;/font&gt;&lt;br&gt;
  &lt;font color=MediumPurple&gt;&lt;strong&gt;return&lt;/strong&gt; &lt;em&gt;currentSum/length of A&lt;/em&gt;&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Line 1, &lt;font color=CadetBlue&gt;&lt;em&gt;currentSum&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;0&lt;/em&gt;&lt;/font&gt;, is &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; operation since we&apos;re assigning a value to a variable.&lt;/li&gt;
&lt;li&gt;Line 2, &lt;font color=SteelBlue&gt;&lt;strong&gt;for&lt;/strong&gt; &lt;em&gt;valueToBeAdded&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;nextElementInA (starting from the 1st element in A)&lt;/em&gt; &lt;strong&gt;to&lt;/strong&gt; &lt;em&gt;EndOfA&lt;/em&gt; &lt;strong&gt;do&lt;/strong&gt;&lt;/font&gt;, is once again &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;c_1 + c_2n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.73333em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.58056em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; operations for the same reasons as the previous examples.&lt;/li&gt;
&lt;li&gt;Line 3, &lt;font color=CadetBlue&gt;&lt;em&gt;currentSum&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;currentSum + valueToBeAdded&lt;/em&gt;&lt;/font&gt;, is &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;2n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; operations since we&apos;re once again performing an arithmetic operation and assigning the result to a variable during each iteration of the loop.&lt;/li&gt;
&lt;li&gt;Line 4, &lt;font color=MediumPurple&gt;&lt;strong&gt;return&lt;/strong&gt; &lt;em&gt;currentSum/length of A&lt;/em&gt;&lt;/font&gt;, consists of &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;3&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; operations since we&apos;ll be calling the len() function to get the length of list &lt;em&gt;A&lt;/em&gt;, performing an arithmetic operation, and returning a value from a function.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Therefore, the running time of the algorithm is:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;t = 1 + c_1 + c_2n + 2n + 3 = 4 + c_1 + c_2n + 2n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.61508em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.72777em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.73333em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.73333em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.72777em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.72777em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.73333em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.73333em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;Ex. 4) Find how many elements in a list are even&lt;/h3&gt;
&lt;p&gt;&lt;font color=SlateGray&gt;&lt;strong&gt;Algorithm&lt;/strong&gt; &lt;em&gt;findNumberOfEvenElements(A)&lt;/em&gt;&lt;br&gt;
  &lt;strong&gt;Input&lt;/strong&gt; list &lt;em&gt;A&lt;/em&gt; of &lt;em&gt;n&lt;/em&gt; integers&lt;br&gt;
  &lt;strong&gt;Output&lt;/strong&gt; the number of elements in list &lt;em&gt;A&lt;/em&gt; that are even&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;  &lt;font color=CadetBlue&gt;&lt;em&gt;numberOfEvenElements&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;0&lt;/em&gt;&lt;/font&gt;&lt;br&gt;
  &lt;font color=SteelBlue&gt;&lt;strong&gt;for&lt;/strong&gt; &lt;em&gt;currentValue&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;nextElementInA (starting from the 1st element in A)&lt;/em&gt; &lt;strong&gt;to&lt;/strong&gt; &lt;em&gt;EndOfA&lt;/em&gt; &lt;strong&gt;do&lt;/strong&gt;&lt;/font&gt;&lt;br&gt;
    &lt;font color=SteelBlue&gt;&lt;strong&gt;if&lt;/strong&gt; &lt;em&gt;currentValue mod 2 = 0&lt;/em&gt; &lt;strong&gt;then&lt;/strong&gt;&lt;/font&gt;&lt;br&gt;
      &lt;font color=CadetBlue&gt;&lt;em&gt;numberOfEvenElements&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;numberOfEvenElements + 1&lt;/em&gt;&lt;/font&gt;&lt;br&gt;
  &lt;font color=MediumPurple&gt;&lt;strong&gt;return&lt;/strong&gt; &lt;em&gt;numberOfEvenElements&lt;/em&gt;&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Line 1, &lt;font color=CadetBlue&gt;&lt;em&gt;numberOfEvenElements&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;0&lt;/em&gt;&lt;/font&gt;, is &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; operation since we&apos;re assigning a value to a variable.&lt;/li&gt;
&lt;li&gt;Line 2, &lt;font color=SteelBlue&gt;&lt;strong&gt;for&lt;/strong&gt; &lt;em&gt;currentValue&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;nextElementInA (starting from the 1st element in A)&lt;/em&gt; &lt;strong&gt;to&lt;/strong&gt; &lt;em&gt;EndOfA&lt;/em&gt; &lt;strong&gt;do&lt;/strong&gt;&lt;/font&gt;, is once again &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;c_1 + c_2n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.73333em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.58056em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; operations for the same reasons as the previous examples.&lt;/li&gt;
&lt;li&gt;Line 3, &lt;font color=SteelBlue&gt;&lt;strong&gt;if&lt;/strong&gt; &lt;em&gt;currentValue mod 2 = 0&lt;/em&gt; &lt;strong&gt;then&lt;/strong&gt;&lt;/font&gt;, consists of &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;2n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; operations since we&apos;re performing an arithmetic operation and then comparing the result with 0 during each iteration of the loop.&lt;/li&gt;
&lt;li&gt;Line 4, &lt;font color=CadetBlue&gt;&lt;em&gt;numberOfEvenElements&lt;/em&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leftarrow&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.36687em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;←&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;numberOfEvenElements + 1&lt;/em&gt;&lt;/font&gt;, consists of &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;2n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; operations since we&apos;re assumuing the worst-case input which means each element in &lt;em&gt;A&lt;/em&gt; is even, so we&apos;re performing an arithmetic operation and assigning the result to a variable during each iteration of the loop.&lt;/li&gt;
&lt;li&gt;Line 5, &lt;font color=MediumPurple&gt;&lt;em&gt;return numberOfEvenElements&lt;/em&gt;&lt;/font&gt;, consists of &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; operation since we&apos;re only returning a value from a function.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Therefore, the running time of the algorithm is:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;t = 1 + c_1 + c_2n + 2n + 2n + 1 = 2 + c_1 + c_2n + 4n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.61508em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.72777em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.73333em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.73333em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.72777em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.72777em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.72777em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.73333em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.73333em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Configuring i3wm]]></title><description><![CDATA[Packages we will need i3wm terminal X utilities autotiling Note If you want autotiling on Ubuntu or another distro head over to there github…]]></description><link>https://www.chrisatmachine.com/Linux/04-i3wm/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Linux/04-i3wm/</guid><pubDate>Sat, 16 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Packages we will need&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;i3wm&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      sudo pacman -S i3-gaps i3status i3lock dmenu    # Arch

sudo apt install i3-gaps i3status i3lock dmenu    # Ubuntu
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;terminal&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      sudo pacman -S alacritty

sudo apt install alacritty
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;X utilities&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      sudo pacman -S xorg-xset xorg-xrandr   # Arch

sudo apt install xorg-xset xorg-xrandr   # Ubuntu
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;autotiling&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      yay -S autotiling   # AUR only
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Note&lt;/h3&gt;
&lt;p&gt;If you want autotiling on Ubuntu or another distro head over to there github and grab the python file&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nwg-piotr/autotiling&quot;&gt;autotiling&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Config&lt;/h2&gt;
&lt;p&gt;Put this stuff in your &lt;code class=&quot;language-text&quot;&gt;.xprofile&lt;/code&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      # Stop screen from going blank
xset s off
xset -dpms
xset s noblank
# Faster key repeat and delay
xset r rate 210 40
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;I recommend pulling down my config to get started&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      git clone https://github.com/ChristianChiarulli/dotfiles.git ~/dotfiles
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;We can grab some of my config like this:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      mv ~/.config/i3/config ~/.config/i3/config.old

mv ~/dotfiles/.config/i3/config ~/.config/i3/config

mkdir ~/.config/alacritty

mv ~/dotfiles/.config/alacritty/alacritty.yml ~/.config/alacritty/alacritty.yml
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Add status bar&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      bar {
  position top
  status_command i3status
}
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Commands&lt;/h2&gt;
&lt;p&gt;For a list of all your commands open the &lt;code class=&quot;language-text&quot;&gt;~/.config/i3/config&lt;/code&gt; file and look under each character to see what they do&lt;/p&gt;
&lt;h2&gt;Extending i3&lt;/h2&gt;
&lt;p&gt;You can checkout the &lt;code class=&quot;language-text&quot;&gt;i3ipc&lt;/code&gt; library for python if you&apos;re interested&lt;/p&gt;
&lt;h2&gt;Why use i3wm instead of any other?&lt;/h2&gt;
&lt;p&gt;I use i3wm because it was the first WM I was introduced to. I&apos;m sure the other ones are great too.&lt;/p&gt;
&lt;p&gt;It also has a very big community and lots of documentation.&lt;/p&gt;
&lt;p&gt;Some other options to consider are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dwm&lt;/li&gt;
&lt;li&gt;xmonad&lt;/li&gt;
&lt;li&gt;bspwm&lt;/li&gt;
&lt;li&gt;awesome&lt;/li&gt;
&lt;li&gt;spectrwm&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/I3&quot;&gt;ArchWiki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ashinkarov/i3-extras&quot;&gt;i3 extras&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Floaterm]]></title><description><![CDATA[Install Create config file Make sure to source this file in  Floaterm Floaterm is a floating terminal for Neovim Configure Floaterm Floaterm…]]></description><link>https://www.chrisatmachine.com/Neovim/16-floaterm/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Neovim/16-floaterm/</guid><pubDate>Fri, 15 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Install&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      Plug &apos;voldikss/vim-floaterm&apos;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Create config file&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      touch ~/.config/nvim/plug-config/floaterm.vim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Make sure to source this file in &lt;code class=&quot;language-text&quot;&gt;init.vim&lt;/code&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      source $HOME/.config/nvim/plug-config/floaterm.vim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Floaterm&lt;/h2&gt;
&lt;p&gt;Floaterm is a floating terminal for Neovim&lt;/p&gt;
&lt;h3&gt;Configure Floaterm&lt;/h3&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      let g:floaterm_keymap_toggle = &apos;&lt;F1&gt;&apos;
let g:floaterm_keymap_next   = &apos;&lt;F2&gt;&apos;
let g:floaterm_keymap_prev   = &apos;&lt;F3&gt;&apos;
let g:floaterm_keymap_new    = &apos;&lt;F4&gt;&apos;

&quot; Floaterm
let g:floaterm_gitcommit=&apos;floaterm&apos;
let g:floaterm_autoinsert=1
let g:floaterm_width=0.8
let g:floaterm_height=0.8
let g:floaterm_wintitle=0
let g:floaterm_autoclose=1
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h3&gt;Floaterm Commands&lt;/h3&gt;
&lt;p&gt;Here is my which key configuration:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      let g:which_key_map.t = {
      \ &apos;name&apos; : &apos;+terminal&apos; ,
      \ &apos;;&apos; : [&apos;:FloatermNew --wintype=popup --height=6&apos;        , &apos;terminal&apos;],
      \ &apos;f&apos; : [&apos;:FloatermNew fzf&apos;                               , &apos;fzf&apos;],
      \ &apos;g&apos; : [&apos;:FloatermNew lazygit&apos;                           , &apos;git&apos;],
      \ &apos;d&apos; : [&apos;:FloatermNew lazydocker&apos;                        , &apos;docker&apos;],
      \ &apos;n&apos; : [&apos;:FloatermNew node&apos;                              , &apos;node&apos;],
      \ &apos;N&apos; : [&apos;:FloatermNew nnn&apos;                               , &apos;nnn&apos;],
      \ &apos;p&apos; : [&apos;:FloatermNew python&apos;                            , &apos;python&apos;],
      \ &apos;r&apos; : [&apos;:FloatermNew ranger&apos;                            , &apos;ranger&apos;],
      \ &apos;t&apos; : [&apos;:FloatermToggle&apos;                                , &apos;toggle&apos;],
      \ &apos;y&apos; : [&apos;:FloatermNew ytop&apos;                              , &apos;ytop&apos;],
      \ &apos;s&apos; : [&apos;:FloatermNew ncdu&apos;                              , &apos;ncdu&apos;],
      \ }
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Link to Floaterm repo&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/voldikss/vim-floaterm&quot;&gt;Floaterm&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Install packages from AUR with yay]]></title><description><![CDATA[What is the AUR? The AUR is the Arch User Repository, it essentially holds a bunch of packages from the Arch community not found in the…]]></description><link>https://www.chrisatmachine.com/Linux/03-AUR-yay/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Linux/03-AUR-yay/</guid><pubDate>Thu, 14 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;What is the AUR?&lt;/h2&gt;
&lt;p&gt;The AUR is the Arch User Repository, it essentially holds a bunch of packages&lt;/p&gt;
&lt;p&gt;from the Arch community not found in the official repository.&lt;/p&gt;
&lt;h2&gt;What is yay?&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;yay&lt;/code&gt; stands for Yet Another Yogurt&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;yay&lt;/code&gt; is like &lt;code class=&quot;language-text&quot;&gt;pacman&lt;/code&gt; but for the AUR&lt;/p&gt;
&lt;p&gt;It&apos;s written in Go&lt;/p&gt;
&lt;h2&gt;Install yay&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make sure you have git:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      sudo pacman -S git
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install using git:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      git clone https://aur.archlinux.org/yay.git
cd yay
makepkg -si
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install binary (Optional)&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      git clone https://aur.archlinux.org/yay-bin.git
cd yay-bin
makepkg -si
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Commands&lt;/h2&gt;
&lt;p&gt;Some basics to get you started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install a package:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      yay -S &lt;package&gt;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove a package:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      yay -R &lt;package&gt;

yay -Rns &lt;package&gt;   # &lt;- remove package and dependencies
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System upgrade:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      yay -Syu             # &lt;- includes all packages even if installed with pacman

yay                  # &lt;- this does the same thing

yay -Syu --devel     # &lt;- includes -git installed packges
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Search for a package&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      yay -Ss &lt;package&gt;    # &lt;- this will just search

yay &lt;package&gt;        # &lt;- this will search and ask if you want to install

yay -Si &lt;package&gt;    # &lt;- this will get info about the package, including dependencies
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List out packages that need to be updated:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      yay -Pu
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clean up unused dependencies&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      yay -Yc
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember &lt;code class=&quot;language-text&quot;&gt;man yay&lt;/code&gt; should be your goto&lt;/p&gt;
&lt;h2&gt;Note on different types of packages&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/archlinux/comments/ggnu97/what_is_the_difference_between_versions_of_the/&quot;&gt;reddit link with explanation&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Enable color output&lt;/h2&gt;
&lt;p&gt;Make sure you have the Color option set in your &lt;code class=&quot;language-text&quot;&gt;/etc/pacman.conf&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;AUR can be dangerous&lt;/h2&gt;
&lt;p&gt;Technically not all of the content up there is vetted.&lt;/p&gt;
&lt;p&gt;So make sure what you download has lots of votes or that you have inspected the source code&lt;/p&gt;
&lt;h2&gt;FZF Search&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      yay -Slq | fzf -m --preview &apos;cat &lt;(yay -Si {1}) &lt;(yay -Fl {1} | awk &quot;{print \$2}&quot;)&apos; | xargs -ro  yay -S
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Jguer/yay&quot;&gt;yay&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://aur.archlinux.org/packages/&quot;&gt;AUR&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/Arch_User_Repository&quot;&gt;ArchWiki&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[What to do after installing Arch Linux]]></title><description><![CDATA[Setup your network Enable NetworkManager service Connect to Network Here we will simply add a new user to our system and give them wheel…]]></description><link>https://www.chrisatmachine.com/Linux/02-After-Install/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Linux/02-After-Install/</guid><pubDate>Wed, 13 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Setup your network&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      ping archlinux.org

pacman -S networkmanager network-manager-applet
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Enable NetworkManager service&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      systemctl start NetworkManager

systemctl enable NetworkManager
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Connect to Network&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      nmtui
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Here we will simply add a new user to our system and give them wheel access&lt;/p&gt;
&lt;h2&gt;Add a user&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Add user&lt;/li&gt;
&lt;/ul&gt;
&lt;code-fence lang=&quot;sh&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      useradd -m -g wheel &lt;your_user&gt;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;ul&gt;
&lt;li&gt;Create password&lt;/li&gt;
&lt;/ul&gt;
&lt;code-fence lang=&quot;sh&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      passwd &lt;your_user&gt;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Switch users&lt;/h2&gt;
&lt;p&gt;To switch to your user run:&lt;/p&gt;
&lt;code-fence lang=&quot;sh&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      su &lt;your_user&gt;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Giving your user access to sudo&lt;/h2&gt;
&lt;p&gt;Make sure you have &lt;code class=&quot;language-text&quot;&gt;vi&lt;/code&gt; installed&lt;/p&gt;
&lt;p&gt;Enter:&lt;/p&gt;
&lt;code-fence lang=&quot;sh&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      visudo
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;and uncomment this line so it looks like this&lt;/p&gt;
&lt;code-fence lang=&quot;sh&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      %wheel ALL=(ALL) ALL
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;if you hate typing your password everytime like me do this instead&lt;/p&gt;
&lt;code-fence lang=&quot;sh&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      %wheel ALL=(ALL) NOPASSWD: ALL
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Need more?&lt;/h2&gt;
&lt;p&gt;check out man pages for the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;useradd&lt;/li&gt;
&lt;li&gt;userdel&lt;/li&gt;
&lt;li&gt;groupadd&lt;/li&gt;
&lt;li&gt;groupdel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;you can do this by typing:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      man &lt;command&gt;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Install Xorg&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      pacman -S xorg-server xorg-xinit
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Installing a DM&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      pacman -S lightdm

pacman -S lightdm-gtk-greeter

pacman -S lightdm-gtk-greeter-settings
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Enable lightdm service&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      systemctl enable lightdm
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;List our enabled services&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      systemctl list-unit-files --state=enabled
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Install i3wm (or any WM or DE)&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      pacman -S i3-gaps i3status i3lock dmenu
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;I&apos;m using i3 but you can install any WM or DE you like best&lt;/p&gt;
&lt;p&gt;Here are some WM options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dwm&lt;/li&gt;
&lt;li&gt;awesome&lt;/li&gt;
&lt;li&gt;bspwm&lt;/li&gt;
&lt;li&gt;xmonad&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are some DE options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;XFCE&lt;/li&gt;
&lt;li&gt;KDE&lt;/li&gt;
&lt;li&gt;Gnome&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Install DE (Optional)&lt;/h3&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      pacman -S xfce4
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Install a terminal emulator&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      pacman -S alacritty
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;I&apos;m using Alacritty but you can install any terminal emulator you want&lt;/p&gt;
&lt;p&gt;Here are some options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;st&lt;/li&gt;
&lt;li&gt;rxvt-unicode&lt;/li&gt;
&lt;li&gt;termite&lt;/li&gt;
&lt;li&gt;terminator&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Install a web browser and file manager&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      pacman -S firefox

pacman -S nautilus
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;We&apos;re done&lt;/h2&gt;
&lt;p&gt;You can now reboot into your new system!&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      reboot
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  </content:encoded></item><item><title><![CDATA[Sneak]]></title><description><![CDATA[Install Create config file Make sure to source this file in  Sneak Sneak is a motion plugin for vim that remaps the  and  keys The authors…]]></description><link>https://www.chrisatmachine.com/Neovim/13-sneak/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Neovim/13-sneak/</guid><pubDate>Sun, 03 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Install&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      Plug &apos;justinmk/vim-sneak&apos;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Create config file&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      touch ~/.config/nvim/plug-config/sneak.vim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Make sure to source this file in &lt;code class=&quot;language-text&quot;&gt;init.vim&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Sneak&lt;/h2&gt;
&lt;p&gt;Sneak is a motion plugin for vim that remaps the &lt;code class=&quot;language-text&quot;&gt;s&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;S&lt;/code&gt; keys&lt;/p&gt;
&lt;p&gt;The authors rationale for remapping these keys is this: cl is equivalent to s, and cc is equivalent to S.&lt;/p&gt;
&lt;h3&gt;Configure Sneak&lt;/h3&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      let g:sneak#label = 1

&quot; case insensitive sneak
let g:sneak#use_ic_scs = 1

&quot; immediately move to the next instance of search, if you move the cursor sneak is back to default behavior
let g:sneak#s_next = 1

&quot; remap so I can use , and ; with f and t
map gS &lt;Plug&gt;Sneak_,
map gs &lt;Plug&gt;Sneak_;

&quot; Change the colors
highlight Sneak guifg=black guibg=#00C7DF ctermfg=black ctermbg=cyan
highlight SneakScope guifg=red guibg=yellow ctermfg=red ctermbg=yellow

&quot; Cool prompts
&quot; let g:sneak#prompt = &apos;🕵&apos;
&quot; let g:sneak#prompt = &apos;🔎&apos;

&quot; I like quickscope better for this since it keeps me in the scope of a single line
&quot; map f &lt;Plug&gt;Sneak_f
&quot; map F &lt;Plug&gt;Sneak_F
&quot; map t &lt;Plug&gt;Sneak_t
&quot; map T &lt;Plug&gt;Sneak_T
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h3&gt;Sneak Commands&lt;/h3&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      s{char}{char}
S{char}{char}

f{char}
F{char}


t{char}
T{char}
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Link to Sneak repo&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/justinmk/vim-sneak&quot;&gt;Sneak&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Quickscope]]></title><description><![CDATA[Install Create config file Make sure to source this file in  Quickscope Form the github repo: "An always-on highlight for a unique character…]]></description><link>https://www.chrisatmachine.com/Neovim/14-quickscope/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Neovim/14-quickscope/</guid><pubDate>Sun, 03 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Install&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      Plug &apos;unblevable/quick-scope&apos;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Create config file&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      touch ~/.config/nvim/plug-config/quickscope.vim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Make sure to source this file in &lt;code class=&quot;language-text&quot;&gt;init.vim&lt;/code&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      source $HOME/.config/nvim/plug-config/quickscope.vim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Quickscope&lt;/h2&gt;
&lt;p&gt;Form the github repo:&lt;/p&gt;
&lt;p&gt;&quot;An always-on highlight for a unique character in every word on a line to help you use f, F and family.&quot;&lt;/p&gt;
&lt;h3&gt;Configure Quickscope&lt;/h3&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      &quot; Trigger a highlight in the appropriate direction when pressing these keys:
let g:qs_highlight_on_keys = [&apos;f&apos;, &apos;F&apos;, &apos;t&apos;, &apos;T&apos;]

highlight QuickScopePrimary guifg=&apos;#00C7DF&apos; gui=underline ctermfg=155 cterm=underline
highlight QuickScopeSecondary guifg=&apos;#afff5f&apos; gui=underline ctermfg=81 cterm=underline

let g:qs_max_chars=150
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h3&gt;Quickscope Commands&lt;/h3&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      f{char}
F{char}


t{char}
T{char}
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Link to Quickscope repo&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/unblevable/quick-scope&quot;&gt;Quickscope&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Which Key]]></title><description><![CDATA[Install Create config file Make sure to source this file in  Which Key From the github repo: "vim-which-key is vim port of emacs-which-key…]]></description><link>https://www.chrisatmachine.com/Neovim/15-which-key/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Neovim/15-which-key/</guid><pubDate>Sun, 03 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Install&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      Plug &apos;liuchengxu/vim-which-key&apos;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Create config file&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      touch ~/.config/nvim/keys/which-key.vim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Make sure to source this file in &lt;code class=&quot;language-text&quot;&gt;init.vim&lt;/code&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      source $HOME/.config/nvim/keys/which-key.vim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Which Key&lt;/h2&gt;
&lt;p&gt;From the github repo:&lt;/p&gt;
&lt;p&gt;&quot;vim-which-key is vim port of emacs-which-key that displays available keybindings in popup.&quot;&lt;/p&gt;
&lt;h3&gt;Configure Which Key&lt;/h3&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      &quot; Map leader to which_key
nnoremap &lt;silent&gt; &lt;leader&gt; :silent WhichKey &apos;&lt;Space&gt;&apos;&lt;CR&gt;
vnoremap &lt;silent&gt; &lt;leader&gt; :silent &lt;c-u&gt; :silent WhichKeyVisual &apos;&lt;Space&gt;&apos;&lt;CR&gt;

&quot; Create map to add keys to
let g:which_key_map =  {}
&quot; Define a separator
let g:which_key_sep = &apos;→&apos;
&quot; set timeoutlen=100


&quot; Not a fan of floating windows for this
let g:which_key_use_floating_win = 0

&quot; Change the colors if you want
highlight default link WhichKey          Operator
highlight default link WhichKeySeperator DiffAdded
highlight default link WhichKeyGroup     Identifier
highlight default link WhichKeyDesc      Function

&quot; Hide status line
autocmd! FileType which_key
autocmd  FileType which_key set laststatus=0 noshowmode noruler
  \| autocmd BufLeave &lt;buffer&gt; set laststatus=2 noshowmode ruler

&quot; Single mappings
let g:which_key_map[&apos;/&apos;] = [ &apos;&lt;Plug&gt;NERDCommenterToggle&apos;  , &apos;comment&apos; ]
let g:which_key_map[&apos;e&apos;] = [ &apos;:CocCommand explorer&apos;       , &apos;explorer&apos; ]
let g:which_key_map[&apos;f&apos;] = [ &apos;:Files&apos;                     , &apos;search files&apos; ]
let g:which_key_map[&apos;h&apos;] = [ &apos;&lt;C-W&gt;s&apos;                     , &apos;split below&apos;]
let g:which_key_map[&apos;r&apos;] = [ &apos;:Ranger&apos;                    , &apos;ranger&apos; ]
let g:which_key_map[&apos;S&apos;] = [ &apos;:Startify&apos;                  , &apos;start screen&apos; ]
let g:which_key_map[&apos;T&apos;] = [ &apos;:Rg&apos;                        , &apos;search text&apos; ]
let g:which_key_map[&apos;v&apos;] = [ &apos;&lt;C-W&gt;v&apos;                     , &apos;split right&apos;]
let g:which_key_map[&apos;z&apos;] = [ &apos;Goyo&apos;                       , &apos;zen&apos; ]

&quot; s is for search
let g:which_key_map.s = {
      \ &apos;name&apos; : &apos;+search&apos; ,
      \ &apos;/&apos; : [&apos;:History/&apos;     , &apos;history&apos;],
      \ &apos;;&apos; : [&apos;:Commands&apos;     , &apos;commands&apos;],
      \ &apos;a&apos; : [&apos;:Ag&apos;           , &apos;text Ag&apos;],
      \ &apos;b&apos; : [&apos;:BLines&apos;       , &apos;current buffer&apos;],
      \ &apos;B&apos; : [&apos;:Buffers&apos;      , &apos;open buffers&apos;],
      \ &apos;c&apos; : [&apos;:Commits&apos;      , &apos;commits&apos;],
      \ &apos;C&apos; : [&apos;:BCommits&apos;     , &apos;buffer commits&apos;],
      \ &apos;f&apos; : [&apos;:Files&apos;        , &apos;files&apos;],
      \ &apos;g&apos; : [&apos;:GFiles&apos;       , &apos;git files&apos;],
      \ &apos;G&apos; : [&apos;:GFiles?&apos;      , &apos;modified git files&apos;],
      \ &apos;h&apos; : [&apos;:History&apos;      , &apos;file history&apos;],
      \ &apos;H&apos; : [&apos;:History:&apos;     , &apos;command history&apos;],
      \ &apos;l&apos; : [&apos;:Lines&apos;        , &apos;lines&apos;] ,
      \ &apos;m&apos; : [&apos;:Marks&apos;        , &apos;marks&apos;] ,
      \ &apos;M&apos; : [&apos;:Maps&apos;         , &apos;normal maps&apos;] ,
      \ &apos;p&apos; : [&apos;:Helptags&apos;     , &apos;help tags&apos;] ,
      \ &apos;P&apos; : [&apos;:Tags&apos;         , &apos;project tags&apos;],
      \ &apos;s&apos; : [&apos;:Snippets&apos;     , &apos;snippets&apos;],
      \ &apos;S&apos; : [&apos;:Colors&apos;       , &apos;color schemes&apos;],
      \ &apos;t&apos; : [&apos;:Rg&apos;           , &apos;text Rg&apos;],
      \ &apos;T&apos; : [&apos;:BTags&apos;        , &apos;buffer tags&apos;],
      \ &apos;w&apos; : [&apos;:Windows&apos;      , &apos;search windows&apos;],
      \ &apos;y&apos; : [&apos;:Filetypes&apos;    , &apos;file types&apos;],
      \ &apos;z&apos; : [&apos;:FZF&apos;          , &apos;FZF&apos;],
      \ }

&quot; Register which key map
call which_key#register(&apos;&lt;Space&gt;&apos;, &quot;g:which_key_map&quot;)
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h3&gt;WhichKey Commands&lt;/h3&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      &lt;leader&gt;{char}
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Link to WhichKey repo&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/liuchengxu/vim-which-key&quot;&gt;WhichKey&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Git integration]]></title><description><![CDATA[Plugins We're going to be looking at 4 plugins that bring a good integrate git experience to Neovim Create config files Make sure to source…]]></description><link>https://www.chrisatmachine.com/Neovim/12-git-integration/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Neovim/12-git-integration/</guid><pubDate>Sat, 02 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Plugins&lt;/h2&gt;
&lt;p&gt;We&apos;re going to be looking at 4 plugins that bring a good integrate git experience to Neovim&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      Plug &apos;mhinz/vim-signify&apos;
Plug &apos;tpope/vim-fugitive&apos;
Plug &apos;tpope/vim-rhubarb&apos;
Plug &apos;junegunn/gv.vim&apos;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Create config files&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      touch ~/.config/nvim/plug-config/signify.vim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Make sure to source this file in &lt;code class=&quot;language-text&quot;&gt;init.vim&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Configure Signify&lt;/h3&gt;
&lt;p&gt;Signify will show &lt;strong&gt;added&lt;/strong&gt;, &lt;strong&gt;modified&lt;/strong&gt;, or &lt;strong&gt;removed&lt;/strong&gt; lines&lt;/p&gt;
&lt;p&gt;From the documentation:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      SIGNS                                                            *signify-signs*

    `+`     This line was added.

    `!`     This line was modified.

    `_1`    The number of deleted lines below this sign. If the number is larger
    `99`    than 9, the `_` will be omitted. For numbers larger than 99, `_&gt;`
    `_&gt;`    will be shown instead.

    `!1`    This line was modified and the lines below were deleted.
    `!&gt;`    It is a combination of `!` and `_`. If the number is larger than 9,
          `!&gt;` will be shown instead.

    `‾`     The first line was removed. It&apos;s a special case of the `_` sign.

See |g:signify_sign_add| on how to use different signs.
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;You can also stage and unstage hunks&lt;/p&gt;
&lt;p&gt;Here&apos;s some config for changing the buffer signs&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      &quot; Change these if you want
let g:signify_sign_add               = &apos;+&apos;
let g:signify_sign_delete            = &apos;_&apos;
let g:signify_sign_delete_first_line = &apos;‾&apos;
let g:signify_sign_change            = &apos;~&apos;

&quot; I find the numbers disctracting
let g:signify_sign_show_count = 0
let g:signify_sign_show_text = 1


&quot; Jump though hunks
nmap &lt;leader&gt;gj &lt;plug&gt;(signify-next-hunk)
nmap &lt;leader&gt;gk &lt;plug&gt;(signify-prev-hunk)
nmap &lt;leader&gt;gJ 9999&lt;leader&gt;gJ
nmap &lt;leader&gt;gK 9999&lt;leader&gt;gk


&quot; If you like colors instead
&quot; highlight SignifySignAdd                  ctermbg=green                guibg=#00ff00
&quot; highlight SignifySignDelete ctermfg=black ctermbg=red    guifg=#ffffff guibg=#ff0000
&quot; highlight SignifySignChange ctermfg=black ctermbg=yellow guifg=#000000 guibg=#ffff00
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h3&gt;Commands&lt;/h3&gt;
&lt;p&gt;Here are the commands I use:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :SignifyToggle
:SignifyToggleHighlight
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;There are more commands but I prefer the options fugitive and gv provide&lt;/p&gt;
&lt;h2&gt;Fugitive / Rhubarb&lt;/h2&gt;
&lt;p&gt;This plugin is what we&apos;ll use for interacting with git&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; GBrowse only works when Rhubarb is installed&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Make sure you are using git through ssh not http&lt;/p&gt;
&lt;h3&gt;Commands&lt;/h3&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :Git add

:Git commit

:Git push

:Git pull

:Git diff

:Git log

:Git blame

Gdiffsplit

GRemove

GBrowse
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;GV&lt;/h2&gt;
&lt;h3&gt;Commands&lt;/h3&gt;
&lt;p&gt;From the readme: &quot;A git commit browser.&quot;&lt;/p&gt;
&lt;p&gt;To open commit browser:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :GV
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;You can pass git log options to the command, e.g. :GV -S foobar.&lt;/p&gt;
&lt;h3&gt;Other options&lt;/h3&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :GV!         # will only list commits that affected the current file
:GV?         # fills the location list with the revisions of the current file
:GV          # or :GV? can be used in visual mode to track the changes in the selected lines.
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h3&gt;Mappings&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;o or &lt;cr&gt; on a commit to display the content of it&lt;/li&gt;
&lt;li&gt;o or &lt;cr&gt; on commits to display the diff in the range&lt;/li&gt;
&lt;li&gt;O opens a new tab instead&lt;/li&gt;
&lt;li&gt;gb for :Gbrowse&lt;/li&gt;
&lt;li&gt;]] and [[ to move between commits&lt;/li&gt;
&lt;li&gt;. to start command-line with :Git [CURSOR] SHA à la fugitive&lt;/li&gt;
&lt;li&gt;q or gq to close&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Check out the repos here&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mhinz/vim-signify&quot;&gt;signify&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;fugitive&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tpope/vim-rhubarb&quot;&gt;rhubarb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/junegunn/gv.vim&quot;&gt;gv&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Project Management with Startify]]></title><description><![CDATA[Plug in Startify Create a config file Sessions This plugin will let us manage our sessions very easily Add ! to skip the prompt We should…]]></description><link>https://www.chrisatmachine.com/Neovim/11-startify/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Neovim/11-startify/</guid><pubDate>Fri, 01 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Plug in Startify&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      Plug &apos;mhinz/vim-startify&apos;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Create a config file&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      touch ~/.config/nvim/plug-config/start-screen.vim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Sessions&lt;/h2&gt;
&lt;p&gt;This plugin will let us manage our sessions very easily&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :SLoad       load a session
:SSave[!]    save a session
:SDelete[!]  delete a session
:SClose      close a session
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Add ! to skip the prompt&lt;/p&gt;
&lt;p&gt;We should specify where we want Startify to keep our sessions&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      let g:startify_session_dir = &apos;~/.config/nvim/session&apos;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Startify Lists&lt;/h2&gt;
&lt;p&gt;We can specify what shows up in our menu like this:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      let g:startify_lists = [
          \ { &apos;type&apos;: &apos;files&apos;,     &apos;header&apos;: [&apos;   Files&apos;]            },
          \ { &apos;type&apos;: &apos;dir&apos;,       &apos;header&apos;: [&apos;   Current Directory &apos;. getcwd()] },
          \ { &apos;type&apos;: &apos;sessions&apos;,  &apos;header&apos;: [&apos;   Sessions&apos;]       },
          \ { &apos;type&apos;: &apos;bookmarks&apos;, &apos;header&apos;: [&apos;   Bookmarks&apos;]      },
          \ ]
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Bookmarks&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      let g:startify_bookmarks = [
            \ { &apos;c&apos;: &apos;~/.config/i3/config&apos; },
            \ { &apos;i&apos;: &apos;~/.config/nvim/init.vim&apos; },
            \ { &apos;z&apos;: &apos;~/.zshrc&apos; },
            \ &apos;~/Blog&apos;,
            \ &apos;~/Code&apos;,
            \ &apos;~/Pics&apos;,
            \ ]
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Configuration options&lt;/h2&gt;
&lt;p&gt;You can automatically restart a session like this&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      let g:startify_session_autoload = 1
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;From the docs:&lt;/p&gt;
&lt;p&gt;&quot;If this option is enabled and you start Vim in a directory that contains a
&lt;code class=&quot;language-text&quot;&gt;Session.vim&lt;/code&gt;, that session will be loaded automatically. Otherwise it will be
shown as the top entry in the Startify buffer.&quot;&lt;/p&gt;
&lt;p&gt;Let Startify take care of buffers&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      let g:startify_session_delete_buffers = 1
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Similar to Vim-rooter&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      let g:startify_change_to_vcs_root = 1
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;If you want Unicode&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      let g:startify_fortune_use_unicode = 1
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Automatically Update Sessions&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      let g:startify_session_persistence = 1
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Get rid of empy buffer and quit&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      let g:startify_enable_special = 0
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Add a custom header&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      let g:startify_custom_header = [
        \ &apos;   _  __     _         __  ___         __     ___ &apos;,
        \ &apos;  / |/ /  __(_)_ _    /  |/  /__ _____/ /    |_  |&apos;,
        \ &apos; /    / |/ / /  ` \  / /|_/ / _ `/ __/ _ \  / __/ &apos;,
        \ &apos;/_/|_/|___/_/_/_/_/ /_/  /_/\_,_/\__/_//_/ /____/ &apos;,
        \]
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  </content:encoded></item><item><title><![CDATA[Integrate Neovim with FZF & more]]></title><description><![CDATA[Install FZF, Ripgrep, Universal-ctags, Silver-searcher First let's just install a bunch of awesome tools to help you search/find stuff Mac…]]></description><link>https://www.chrisatmachine.com/Neovim/08-fzf/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Neovim/08-fzf/</guid><pubDate>Thu, 30 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Install FZF, Ripgrep, Universal-ctags, Silver-searcher&lt;/h2&gt;
&lt;p&gt;First let&apos;s just install a bunch of awesome tools to help you search/find stuff&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mac&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      brew install fzf

# To install useful key bindings and fuzzy completion:
$(brew --prefix)/opt/fzf/install

brew install ripgrep

brew install --HEAD universal-ctags/universal-ctags/universal-ctags

brew install the_silver_searcher

brew install fd
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ubuntu (I think there&apos;s snaps for this stuff too)&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      sudo apt install fzf

sudo apt install ripgrep

sudo apt install universal-ctags

sudo apt install silversearcher-ag

sudo apt install fd-find
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Arch&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      sudo pacman -S fzf

sudo pacman -S ripgrep

yay -S universal-ctags-git

sudo pacman -S the_silver_searcher

pacman -S fd
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Plug FZF &amp;#x26; vim-rooter into vim&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      Plug &apos;junegunn/fzf&apos;, { &apos;do&apos;: { -&gt; fzf#install() } }
Plug &apos;junegunn/fzf.vim&apos;
Plug &apos;airblade/vim-rooter&apos;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      &quot; This is the default extra key bindings
let g:fzf_action = {
  \ &apos;ctrl-t&apos;: &apos;tab split&apos;,
  \ &apos;ctrl-x&apos;: &apos;split&apos;,
  \ &apos;ctrl-v&apos;: &apos;vsplit&apos; }

&quot; Enable per-command history.
&quot; CTRL-N and CTRL-P will be automatically bound to next-history and
&quot; previous-history instead of down and up. If you don&apos;t like the change,
&quot; explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = &apos;~/.local/share/fzf-history&apos;

map &lt;C-f&gt; :Files&lt;CR&gt;
map &lt;leader&gt;b :Buffers&lt;CR&gt;
nnoremap &lt;leader&gt;g :Rg&lt;CR&gt;
nnoremap &lt;leader&gt;t :Tags&lt;CR&gt;
nnoremap &lt;leader&gt;m :Marks&lt;CR&gt;


let g:fzf_tags_command = &apos;ctags -R&apos;
&quot; Border color
let g:fzf_layout = {&apos;up&apos;:&apos;~90%&apos;, &apos;window&apos;: { &apos;width&apos;: 0.8, &apos;height&apos;: 0.8,&apos;yoffset&apos;:0.5,&apos;xoffset&apos;: 0.5, &apos;highlight&apos;: &apos;Todo&apos;, &apos;border&apos;: &apos;sharp&apos; } }

let $FZF_DEFAULT_OPTS = &apos;--layout=reverse --info=inline&apos;
let $FZF_DEFAULT_COMMAND=&quot;rg --files --hidden&quot;


&quot; Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { &apos;fg&apos;:      [&apos;fg&apos;, &apos;Normal&apos;],
  \ &apos;bg&apos;:      [&apos;bg&apos;, &apos;Normal&apos;],
  \ &apos;hl&apos;:      [&apos;fg&apos;, &apos;Comment&apos;],
  \ &apos;fg+&apos;:     [&apos;fg&apos;, &apos;CursorLine&apos;, &apos;CursorColumn&apos;, &apos;Normal&apos;],
  \ &apos;bg+&apos;:     [&apos;bg&apos;, &apos;CursorLine&apos;, &apos;CursorColumn&apos;],
  \ &apos;hl+&apos;:     [&apos;fg&apos;, &apos;Statement&apos;],
  \ &apos;info&apos;:    [&apos;fg&apos;, &apos;PreProc&apos;],
  \ &apos;border&apos;:  [&apos;fg&apos;, &apos;Ignore&apos;],
  \ &apos;prompt&apos;:  [&apos;fg&apos;, &apos;Conditional&apos;],
  \ &apos;pointer&apos;: [&apos;fg&apos;, &apos;Exception&apos;],
  \ &apos;marker&apos;:  [&apos;fg&apos;, &apos;Keyword&apos;],
  \ &apos;spinner&apos;: [&apos;fg&apos;, &apos;Label&apos;],
  \ &apos;header&apos;:  [&apos;fg&apos;, &apos;Comment&apos;] }

&quot;Get Files
command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(&lt;q-args&gt;, fzf#vim#with_preview({&apos;options&apos;: [&apos;--layout=reverse&apos;, &apos;--info=inline&apos;]}), &lt;bang&gt;0)


&quot; Get text in files with Rg
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   &apos;rg --column --line-number --no-heading --color=always --smart-case &apos;.shellescape(&lt;q-args&gt;), 1,
  \   fzf#vim#with_preview(), &lt;bang&gt;0)

&quot; Ripgrep advanced
function! RipgrepFzf(query, fullscreen)
  let command_fmt = &apos;rg --column --line-number --no-heading --color=always --smart-case %s || true&apos;
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, &apos;{q}&apos;)
  let spec = {&apos;options&apos;: [&apos;--phony&apos;, &apos;--query&apos;, a:query, &apos;--bind&apos;, &apos;change:reload:&apos;.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang RG call RipgrepFzf(&lt;q-args&gt;, &lt;bang&gt;0)

&quot; Git grep
command! -bang -nargs=* GGrep
  \ call fzf#vim#grep(
  \   &apos;git grep --line-number &apos;.shellescape(&lt;q-args&gt;), 0,
  \   fzf#vim#with_preview({&apos;dir&apos;: systemlist(&apos;git rev-parse --show-toplevel&apos;)[0]}), &lt;bang&gt;0)
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Links to the Great software found in the blog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/junegunn/fzf.vim&quot;&gt;FZF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot;&gt;ripgrep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/universal-ctags/ctags&quot;&gt;universal-ctags&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ggreer/the_silver_searcher&quot;&gt;the&lt;em&gt;silver&lt;/em&gt;searcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sharkdp/fd&quot;&gt;fd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Note on extra keybindings&lt;/h2&gt;
&lt;p&gt;Read more about keybindings &lt;a href=&quot;https://wiki.archlinux.org/index.php/Fzf&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It is sufficient to source these files below in your bashrc or zshrc for completion and keybindings&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      /usr/share/fzf/completion.zsh
/usr/share/fzf/key-bindings.zsh

/usr/share/fzf/completion.bash
/usr/share/fzf/key-bindings.bash
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Another note&lt;/h2&gt;
&lt;p&gt;From the Archwiki, commands to query packages and install them&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      sudo pacman -Fy # &lt;- only run this once

pacman -Slq | fzf -m --preview &apos;cat &lt;(pacman -Si {1}) &lt;(pacman -Fl {1} | awk &quot;{print \$2}&quot;)&apos; | xargs -ro sudo pacman -S

yay -Slq | fzf -m --preview &apos;cat &lt;(yay -Si {1}) &lt;(yay -Fl {1} | awk &quot;{print \$2}&quot;)&apos; | xargs -ro  yay -S
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  </content:encoded></item><item><title><![CDATA[Adding color with colorizer & rainbow]]></title><description><![CDATA[Install colorizer Configuration Create a place for lua plugins Add the following: Remember to source in , but a little differently this time…]]></description><link>https://www.chrisatmachine.com/Neovim/10-adding-color/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Neovim/10-adding-color/</guid><pubDate>Thu, 30 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Install colorizer&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      Plug &apos;norcalli/nvim-colorizer.lua&apos;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Create a place for lua plugins&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      mkdir ~/.config/nvim/lua

touch ~/.config/nvim/lua/plug-colorizer.lua
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Add the following:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      require&apos;colorizer&apos;.setup(
  {&apos;*&apos;;},
  {
    RGB      = true;         -- #RGB hex codes
	  RRGGBB   = true;         -- #RRGGBB hex codes
	  names    = true;         -- &quot;Name&quot; codes like Blue
	  RRGGBBAA = true;         -- #RRGGBBAA hex codes
	  rgb_fn   = true;         -- CSS rgb() and rgba() functions
	  hsl_fn   = true;         -- CSS hsl() and hsla() functions
	  css      = true;         -- Enable all CSS features: rgb_fn, hsl_fn, names, RGB, RRGGBB
	  css_fn   = true;         -- Enable all CSS *functions*: rgb_fn, hsl_fn
  })
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Remember to source in &lt;code class=&quot;language-text&quot;&gt;init.vim&lt;/code&gt;, but a little differently this time&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      lua require&apos;plug-colorizer&apos;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h3&gt;Note&lt;/h3&gt;
&lt;p&gt;This will not work if the file doesn&apos;t have and extension i.e. .txt .py. js .css&lt;/p&gt;
&lt;p&gt;If you want to enable it you can do so like this:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :ColorizerAttachToBuffer
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Cool Note&lt;/h2&gt;
&lt;p&gt;You can increment and decrement in vim with &lt;code class=&quot;language-text&quot;&gt;c-a&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;c-x&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;just hover over a number in normal mode&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;r&lt;/code&gt; also work great&lt;/p&gt;
&lt;h2&gt;Lua Note&lt;/h2&gt;
&lt;p&gt;Install &lt;code class=&quot;language-text&quot;&gt;luarocks&lt;/code&gt; if you want to use with &lt;code class=&quot;language-text&quot;&gt;coc-lua&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;p&gt;Enter the following to see what happens&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      #8F6fEa
rgb(113, 146, 230)
rgb(7%, 77%, 46%)
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Checkout the repo&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/norcalli/nvim-colorizer.lua&quot;&gt;colorizer&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Install Rainbow&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      Plug &apos;junegunn/rainbow_parentheses.vim&apos;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      let g:rainbow#max_level = 16
let g:rainbow#pairs = [[&apos;(&apos;, &apos;)&apos;], [&apos;[&apos;, &apos;]&apos;], [&apos;{&apos;, &apos;}&apos;]]

autocmd FileType * RainbowParentheses
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  </content:encoded></item><item><title><![CDATA[Vim-commentary]]></title><description><![CDATA[Install commentary Configuration This is my preferred way to use this tool Just press / and it will comment out the line In visual mode…]]></description><link>https://www.chrisatmachine.com/Neovim/09-vim-commentary/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Neovim/09-vim-commentary/</guid><pubDate>Thu, 30 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Install commentary&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      Plug &apos;tpope/vim-commentary&apos;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;This is my preferred way to use this tool&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      nnoremap &lt;space&gt;/ :Commentary&lt;CR&gt;
vnoremap &lt;space&gt;/ :Commentary&lt;CR&gt;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Just press &lt;space&gt;/ and it will comment out the line&lt;/p&gt;
&lt;p&gt;In visual mode select the text you want to comment out and press &lt;space&gt;/&lt;/p&gt;
&lt;h2&gt;Link to repo&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tpope/vim-commentary&quot;&gt;commentary&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Integrate Neovim with Ranger]]></title><description><![CDATA[Install Ranger Mac Ubuntu Arch Install Ranger devicons You can now add  to your  Install Ueberzug (Linux only) Unfortunately Ueberzug only…]]></description><link>https://www.chrisatmachine.com/Neovim/07-ranger/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Neovim/07-ranger/</guid><pubDate>Wed, 29 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Install Ranger&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mac&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      brew install ranger
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ubuntu&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      sudo apt install ranger
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Arch&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      sudo pacman -S ranger
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Install Ranger devicons&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      git clone https://github.com/alexanderjeurissen/ranger_devicons ~/.config/ranger/plugins/ranger_devicons
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;You can now add &lt;code class=&quot;language-text&quot;&gt;default_linemode devicons&lt;/code&gt; to your &lt;code class=&quot;language-text&quot;&gt;rc.conf&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Install Ueberzug (Linux only)&lt;/h2&gt;
&lt;p&gt;Unfortunately Ueberzug only supports linux at the moment as far as I know&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ubuntu (Note you may experience your images being badly placed this is because pip doesn&apos;t have the newest version of ueberzug, if you find this issue please install from source)&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      pip install ueberzug
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Arch&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      yay -S python-ueberzug-git
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Ranger config file&lt;/h2&gt;
&lt;p&gt;make sure you create a ranger config file and at least add the following lines&lt;/p&gt;
&lt;p&gt;Add the following file:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      mkdir ~/.config/ranger

touch ~/.config/ranger/rc.conf
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Add this configuration to &lt;code class=&quot;language-text&quot;&gt;rc.conf&lt;/code&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      set preview_images_method ueberzug

default_linemode devicons

set show_hidden true
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Add the Ranger plugin&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      Plug &apos;kevinhwang91/rnvimr&apos;, {&apos;do&apos;: &apos;make sync&apos;}
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Add some config to &lt;code class=&quot;language-text&quot;&gt;~/.config/nvim/plug-config/rnvimr.vim&lt;/code&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      touch ~/.config/nvim/plug-config/rnvimr.vim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Add the following:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      &quot; Make Ranger replace netrw and be the file explorer
let g:rnvimr_ex_enable = 1

nmap &lt;space&gt;r :RnvimrToggle&lt;CR&gt;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Make sure to source the config&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      source $HOME/.config/nvim/plug-config/rnvimr.vim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Sync your ranger config&lt;/h2&gt;
&lt;p&gt;You may need to run this&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :RnvimrSync
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Alternative Ranger plugin&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/francoiscabrol/ranger.vim&quot;&gt;Alternative&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Exploring coc-explorer]]></title><description><![CDATA[Install coc-explorer This install will be a little different and if you've been following along you probably know we are using coc coc…]]></description><link>https://www.chrisatmachine.com/Neovim/06-file-explorer/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Neovim/06-file-explorer/</guid><pubDate>Tue, 28 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Install coc-explorer&lt;/h2&gt;
&lt;p&gt;This install will be a little different and if you&apos;ve been following along you probably know we are using coc&lt;/p&gt;
&lt;p&gt;coc-explorer is just and extension to that&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :CocInstall coc-explorer
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Config&lt;/h2&gt;
&lt;p&gt;We can add some simple settings in the &lt;code class=&quot;language-text&quot;&gt;coc-settings.json&lt;/code&gt; file&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      // explorer
  &quot;explorer.width&quot;: 30,
  &quot;explorer.icon.enableNerdfont&quot;: true,
  &quot;explorer.previewAction.onHover&quot;: false,
  &quot;explorer.keyMappings.global&quot;: {
    &quot;&lt;cr&gt;&quot;: [&quot;expandable?&quot;, &quot;expand&quot;, &quot;open&quot;],
    &quot;v&quot;: &quot;open:vsplit&quot;
  }
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;We&apos;ll also add some settings in &lt;code class=&quot;language-text&quot;&gt;~/.config/nvim/plug-config/coc.vim&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Append these lines to the end&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      &quot; Explorer
let g:coc_explorer_global_presets = {
\   &apos;.vim&apos;: {
\     &apos;root-uri&apos;: &apos;~/.vim&apos;,
\   },
\   &apos;tab&apos;: {
\     &apos;position&apos;: &apos;tab&apos;,
\     &apos;quit-on-open&apos;: v:true,
\   },
\   &apos;floating&apos;: {
\     &apos;position&apos;: &apos;floating&apos;,
\     &apos;open-action-strategy&apos;: &apos;sourceWindow&apos;,
\   },
\   &apos;floatingTop&apos;: {
\     &apos;position&apos;: &apos;floating&apos;,
\     &apos;floating-position&apos;: &apos;center-top&apos;,
\     &apos;open-action-strategy&apos;: &apos;sourceWindow&apos;,
\   },
\   &apos;floatingLeftside&apos;: {
\     &apos;position&apos;: &apos;floating&apos;,
\     &apos;floating-position&apos;: &apos;left-center&apos;,
\     &apos;floating-width&apos;: 50,
\     &apos;open-action-strategy&apos;: &apos;sourceWindow&apos;,
\   },
\   &apos;floatingRightside&apos;: {
\     &apos;position&apos;: &apos;floating&apos;,
\     &apos;floating-position&apos;: &apos;right-center&apos;,
\     &apos;floating-width&apos;: 50,
\     &apos;open-action-strategy&apos;: &apos;sourceWindow&apos;,
\   },
\   &apos;simplify&apos;: {
\     &apos;file-child-template&apos;: &apos;[selection | clip | 1] [indent][icon | 1] [filename omitCenter 1]&apos;
\   }
\ }

nmap &lt;space&gt;e :CocCommand explorer&lt;CR&gt;
nmap &lt;space&gt;f :CocCommand explorer --preset floating&lt;CR&gt;
autocmd BufEnter * if (winnr(&quot;$&quot;) == 1 &amp;&amp; &amp;filetype == &apos;coc-explorer&apos;) | q | endif
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  </content:encoded></item><item><title><![CDATA[Airline]]></title><description><![CDATA[Plugin Airline and Airline themes Add the following to  Create config Create theme file for airline Add the following configuration Don't…]]></description><link>https://www.chrisatmachine.com/Neovim/05-vim-airline/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Neovim/05-vim-airline/</guid><pubDate>Mon, 27 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Plugin Airline and Airline themes&lt;/h2&gt;
&lt;p&gt;Add the following to &lt;code class=&quot;language-text&quot;&gt;~/.config/nvim/vim-plug/plugins.vim&lt;/code&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      Plug &apos;vim-airline/vim-airline&apos;
Plug &apos;vim-airline/vim-airline-themes&apos;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Create config&lt;/h2&gt;
&lt;p&gt;Create theme file for airline&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      touch ~/.config/nvim/themes/airline.vim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Add the following configuration&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      &quot; enable tabline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = &apos;&apos;
let g:airline#extensions#tabline#left_alt_sep = &apos;&apos;
let g:airline#extensions#tabline#right_sep = &apos;&apos;
let g:airline#extensions#tabline#right_alt_sep = &apos;&apos;

&quot; enable powerline fonts
let g:airline_powerline_fonts = 1
let g:airline_left_sep = &apos;&apos;
let g:airline_right_sep = &apos;&apos;

&quot; Switch to your current theme
let g:airline_theme = &apos;onedark&apos;

&quot; Always show tabs
set showtabline=2

&quot; We don&apos;t need to see things like -- INSERT -- anymore
set noshowmode
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Don&apos;t forget to source this file&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      source $HOME/.config/nvim/themes/airline.vim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Install fonts&lt;/h2&gt;
&lt;p&gt;You may want to install these fonts if you want the little arrows and stuff&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      # clone
git clone https://github.com/powerline/fonts.git --depth=1
# install
cd fonts
./install.sh
# clean-up a bit
cd ..
rm -rf fonts
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Further documentation and repo&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/vim-airline/vim-airline&quot;&gt;vim airline&lt;/a&gt;
&lt;a href=&quot;https://github.com/vim-airline/vim-airline-themes&quot;&gt;vim airline themes&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Neovim Intellisense with coc]]></title><description><![CDATA[Conquerer of Completion This plugin is too featureful (bloated) to explain in a single blog post Good thing the author provided extensive…]]></description><link>https://www.chrisatmachine.com/Neovim/04-vim-coc/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Neovim/04-vim-coc/</guid><pubDate>Sun, 26 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Conquerer of Completion&lt;/h2&gt;
&lt;p&gt;This plugin is too featureful (bloated) to explain in a single blog post&lt;/p&gt;
&lt;p&gt;Good thing the author provided extensive documentation &lt;a href=&quot;https://github.com/neoclide/coc.nvim/wiki&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Install with vim-plug&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      &quot; Stable version of coc
Plug &apos;neoclide/coc.nvim&apos;, {&apos;branch&apos;: &apos;release&apos;}

&quot; Keeping up to date with master
Plug &apos;neoclide/coc.nvim&apos;, {&apos;do&apos;: &apos;yarn install --frozen-lockfile&apos;}
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;make sure you have &lt;code class=&quot;language-text&quot;&gt;yarn&lt;/code&gt; installed if you choose the second way&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      npm i -g yarn
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Create a directory called &lt;code class=&quot;language-text&quot;&gt;plug-config&lt;/code&gt; and an entry for &lt;code class=&quot;language-text&quot;&gt;coc&lt;/code&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      mkdir ~/.config/nvim/plug-config

touch ~/.config/nvim/plug-config/coc.vim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Create basic config file&lt;/h2&gt;
&lt;p&gt;Head over to the &lt;a href=&quot;https://github.com/neoclide/coc.nvim&quot;&gt;readme&lt;/a&gt; and grab his example config&lt;/p&gt;
&lt;p&gt;Add the following to your &lt;code class=&quot;language-text&quot;&gt;init.vim&lt;/code&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      source $HOME/.config/nvim/plug-config/coc.vim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Checking coc health&lt;/h2&gt;
&lt;p&gt;You can run &lt;code class=&quot;language-text&quot;&gt;:checkhealth&lt;/code&gt; and there should now be an entry for &lt;code class=&quot;language-text&quot;&gt;coc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can use &lt;code class=&quot;language-text&quot;&gt;g:coc_node_path&lt;/code&gt; to point to your node executable&lt;/p&gt;
&lt;p&gt;You can also run &lt;code class=&quot;language-text&quot;&gt;:CocInfo&lt;/code&gt; to get some useful info&lt;/p&gt;
&lt;h2&gt;Install extensions&lt;/h2&gt;
&lt;p&gt;You can install extensions for languages like this:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :CocInstall coc-json coc-python coc-snippets coc-vimlsp
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;There are many more extensions to choose from here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/neoclide/coc.nvim/wiki/Using-coc-extensions&quot;&gt;coc-extensions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can list all of the extension commands with:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :CocList commands
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;You can uninstall an extension with:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :CocUninstall coc-html
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;You can manage your extensions with:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :CocList extensions
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Hit &lt;TAB&gt; to see a list of options for each extension&lt;/p&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Run &lt;code class=&quot;language-text&quot;&gt;:CocConfig&lt;/code&gt; this will open the file &lt;code class=&quot;language-text&quot;&gt;~/.config/nvim/coc-settings.json&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;here you can add &lt;a href=&quot;https://github.com/neoclide/coc.nvim/wiki/Language-servers&quot;&gt;language servers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;and other configuration like autoformat and adding a location for snippets (I&apos;ll go over snippets later)&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      {
  &quot;coc.preferences.formatOnSaveFiletypes&quot;: [&quot;css&quot;, &quot;markdown&quot;, &quot;javascript&quot;, &quot;graphql&quot;, &quot;html&quot;, &quot;yaml&quot;,  &quot;json&quot;, &quot;python&quot;],

  // python config
  &quot;python.linting.enabled&quot;: true,
  &quot;python.linting.pylintEnabled&quot;: true,

  &quot;snippets.ultisnips.directories&quot;:
  [
    &quot;UltiSnips&quot;,
    &quot;~/.config/nvim/utils/snips&quot;
  ]

}
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;for more info on configuring your settings checkout &lt;a href=&quot;https://github.com/neoclide/coc.nvim/wiki/Using-the-configuration-file&quot;&gt;this page&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Optional install watchman&lt;/h2&gt;
&lt;p&gt;For watchman supprt install watchman&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mac&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      brew install watchman
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ubuntu&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      sudo apt install watchman
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Arch&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      yay -S watchman
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Note&lt;/h3&gt;
&lt;p&gt;watchman can be a memory hog, to stop all watchman processes and free up some memory run&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      watchman watch-del-all
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Automatically reinstall the extensions you use&lt;/h2&gt;
&lt;p&gt;If you use &lt;code class=&quot;language-text&quot;&gt;neovim&lt;/code&gt; and already have &lt;code class=&quot;language-text&quot;&gt;node&lt;/code&gt; installed, you can use the following script to reinstall your favorite extensions&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      #!/usr/bin/bash

set -o nounset    # error when referencing undefined variable
set -o errexit    # exit when command fails

# Install extensions
mkdir -p ~/.config/coc/extensions
cd ~/.config/coc/extensions
if [ ! -f package.json ]
then
  echo &apos;{&quot;dependencies&quot;:{}}&apos;&gt; package.json
fi
# Change extension names to the extensions you need
npm install coc-snippets coc-python coc-tsserver coc-html coc-css coc-json coc-yaml --global-style --ignore-scripts --no-bin-links --no-package-lock --only=prod
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  </content:encoded></item><item><title><![CDATA[Neovim Themes]]></title><description><![CDATA[Plugin your theme First open vim plug and add your theme, you can add as many themes as you want here to switch between them at any time I'm…]]></description><link>https://www.chrisatmachine.com/Neovim/03-vim-themes/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Neovim/03-vim-themes/</guid><pubDate>Sat, 25 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Plugin your theme&lt;/h2&gt;
&lt;p&gt;First open vim plug and add your theme, you can add as many themes as you want here to switch between them at any time&lt;/p&gt;
&lt;p&gt;I&apos;m going to be installing the onedark theme I&apos;ll link to a repo with a bunch of others at the bottom of the blog&lt;/p&gt;
&lt;p&gt;Open &lt;code class=&quot;language-text&quot;&gt;vim-plug/plugins.vim&lt;/code&gt; and add the following:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      Plug &apos;joshdick/onedark.vim&apos;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Make sure to run &lt;code class=&quot;language-text&quot;&gt;:PlugInstall&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Theme config&lt;/h2&gt;
&lt;p&gt;First create a directory for themes and then add the name of the theme you want to install&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      mkdir ~/.config/nvim/themes

touch ~/.config/nvim/themes/onedark.vim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Now let&apos;s set the colorscheme, open &lt;code class=&quot;language-text&quot;&gt;onedark.vim&lt;/code&gt; and add the following:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      &quot; onedark.vim override: Don&apos;t set a background color when running in a terminal;
if (has(&quot;autocmd&quot;) &amp;&amp; !has(&quot;gui_running&quot;))
  augroup colorset
    autocmd!
    let s:white = { &quot;gui&quot;: &quot;#ABB2BF&quot;, &quot;cterm&quot;: &quot;145&quot;, &quot;cterm16&quot; : &quot;7&quot; }
    autocmd ColorScheme * call onedark#set_highlight(&quot;Normal&quot;, { &quot;fg&quot;: s:white }) &quot; `bg` will not be styled since there is no `bg` setting
  augroup END
endif

hi Comment cterm=italic
let g:onedark_hide_endofbuffer=1
let g:onedark_terminal_italics=1
let g:onedark_termcolors=256

syntax on
colorscheme onedark


&quot; checks if your terminal has 24-bit color support
if (has(&quot;termguicolors&quot;))
    set termguicolors
    hi LineNr ctermbg=NONE guibg=NONE
endif
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h3&gt;Note&lt;/h3&gt;
&lt;p&gt;This config is specific to this theme, checkout the readme for whatever theme you install&lt;/p&gt;
&lt;p&gt;Now we can add our theme to &lt;code class=&quot;language-text&quot;&gt;init.vim&lt;/code&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      source $HOME/.config/nvim/themes/onedark.vim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Where to find more themes&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rafi/awesome-vim-colorschemes&quot;&gt;Check out this repo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Click on any theme in the readme and install it similar to the way I did above&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Neovim Setting up the basics]]></title><description><![CDATA[General Setings To include some basics in your config first create a directory called general and a file called  Here is every general…]]></description><link>https://www.chrisatmachine.com/Neovim/02-vim-general-settings/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Neovim/02-vim-general-settings/</guid><pubDate>Fri, 24 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;General Setings&lt;/h2&gt;
&lt;p&gt;To include some basics in your config first create a directory called general and a file called &lt;code class=&quot;language-text&quot;&gt;settings.vim&lt;/code&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      mkdir ~/.config/nvim/general

touch ~/.config/nvim/general/settings.vim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Here is every general setting I use with a brief explanation:&lt;/p&gt;
&lt;p&gt;Add the following to settings.vim&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      &quot; set leader key
let g:mapleader = &quot;\&lt;Space&gt;&quot;

syntax enable                           &quot; Enables syntax highlighing
set hidden                              &quot; Required to keep multiple buffers open multiple buffers
set nowrap                              &quot; Display long lines as just one line
set encoding=utf-8                      &quot; The encoding displayed
set pumheight=10                        &quot; Makes popup menu smaller
set fileencoding=utf-8                  &quot; The encoding written to file
set ruler              			            &quot; Show the cursor position all the time
set cmdheight=2                         &quot; More space for displaying messages
set iskeyword+=-                      	&quot; treat dash separated words as a word text object&quot;
set mouse=a                             &quot; Enable your mouse
set splitbelow                          &quot; Horizontal splits will automatically be below
set splitright                          &quot; Vertical splits will automatically be to the right
set t_Co=256                            &quot; Support 256 colors
set conceallevel=0                      &quot; So that I can see `` in markdown files
set tabstop=2                           &quot; Insert 2 spaces for a tab
set shiftwidth=2                        &quot; Change the number of space characters inserted for indentation
set smarttab                            &quot; Makes tabbing smarter will realize you have 2 vs 4
set expandtab                           &quot; Converts tabs to spaces
set smartindent                         &quot; Makes indenting smart
set autoindent                          &quot; Good auto indent
set laststatus=0                        &quot; Always display the status line
set number                              &quot; Line numbers
set cursorline                          &quot; Enable highlighting of the current line
set background=dark                     &quot; tell vim what the background color looks like
set showtabline=2                       &quot; Always show tabs
set noshowmode                          &quot; We don&apos;t need to see things like -- INSERT -- anymore
set nobackup                            &quot; This is recommended by coc
set nowritebackup                       &quot; This is recommended by coc
set updatetime=300                      &quot; Faster completion
set timeoutlen=500                      &quot; By default timeoutlen is 1000 ms
set formatoptions-=cro                  &quot; Stop newline continution of comments
set clipboard=unnamedplus               &quot; Copy paste between vim and everything else
&quot;set autochdir                           &quot; Your working directory will always be the same as your working directory

au! BufWritePost $MYVIMRC source %      &quot; auto source when writing to init.vm alternatively you can run :source $MYVIMRC

&quot; You can&apos;t stop me
cmap w!! w !sudo tee %
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Source in init.vim&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      source $HOME/.config/nvim/general/settings.vim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Mapping new keys&lt;/h2&gt;
&lt;p&gt;Again we&apos;ll create a directory called keys and and a file called mappings.vim&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      mkdir ~/.config/nvim/keys

touch ~/.config/nvim/keys/mappings.vim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Add the following to mappings.vim:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      &quot; Better nav for omnicomplete
inoremap &lt;expr&gt; &lt;c-j&gt; (&quot;\&lt;C-n&gt;&quot;)
inoremap &lt;expr&gt; &lt;c-k&gt; (&quot;\&lt;C-p&gt;&quot;)

&quot; Use alt + hjkl to resize windows
nnoremap &lt;M-j&gt;    :resize -2&lt;CR&gt;
nnoremap &lt;M-k&gt;    :resize +2&lt;CR&gt;
nnoremap &lt;M-h&gt;    :vertical resize -2&lt;CR&gt;
nnoremap &lt;M-l&gt;    :vertical resize +2&lt;CR&gt;

&quot; I hate escape more than anything else
inoremap jk &lt;Esc&gt;
inoremap kj &lt;Esc&gt;

&quot; Easy CAPS
inoremap &lt;c-u&gt; &lt;ESC&gt;viwUi
nnoremap &lt;c-u&gt; viwU&lt;Esc&gt;

&quot; TAB in general mode will move to text buffer
nnoremap &lt;TAB&gt; :bnext&lt;CR&gt;
&quot; SHIFT-TAB will go back
nnoremap &lt;S-TAB&gt; :bprevious&lt;CR&gt;

&quot; Alternate way to save
nnoremap &lt;C-s&gt; :w&lt;CR&gt;
&quot; Alternate way to quit
nnoremap &lt;C-Q&gt; :wq!&lt;CR&gt;
&quot; Use control-c instead of escape
nnoremap &lt;C-c&gt; &lt;Esc&gt;
&quot; &lt;TAB&gt;: completion.
inoremap &lt;expr&gt;&lt;TAB&gt; pumvisible() ? &quot;\&lt;C-n&gt;&quot; : &quot;\&lt;TAB&gt;&quot;

&quot; Better tabbing
vnoremap &lt; &lt;gv
vnoremap &gt; &gt;gv

&quot; Better window navigation
nnoremap &lt;C-h&gt; &lt;C-w&gt;h
nnoremap &lt;C-j&gt; &lt;C-w&gt;j
nnoremap &lt;C-k&gt; &lt;C-w&gt;k
nnoremap &lt;C-l&gt; &lt;C-w&gt;l

nnoremap &lt;Leader&gt;o o&lt;Esc&gt;^Da
nnoremap &lt;Leader&gt;O O&lt;Esc&gt;^Da
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Source in init.vim&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      source $HOME/.config/nvim/keys/mappings.vim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Get healthy&lt;/h2&gt;
&lt;p&gt;Open &lt;code class=&quot;language-text&quot;&gt;nvim&lt;/code&gt; and enter the following:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :checkhealth
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;You&apos;ll probably notice you don&apos;t have support for copy/paste also that python and node haven&apos;t been setup&lt;/p&gt;
&lt;p&gt;So let&apos;s fix that&lt;/p&gt;
&lt;p&gt;First we&apos;ll fix copy/paste&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On mac &lt;code class=&quot;language-text&quot;&gt;pbcopy&lt;/code&gt; should be builtin&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On Ubuntu&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      sudo apt install xsel
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On Arch Linux&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      sudo pacman -S xsel
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next we need to install python support (node is optional)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Neovim python support&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      pip install pynvim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Neovim node support&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      npm i -g neovim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Note&lt;/h3&gt;
&lt;p&gt;If you use virtual environments I highly suggest putting these varibles in your config&lt;/p&gt;
&lt;p&gt;I recommend putting this in paths.vim in the general directory&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      let g:python3_host_prog = expand(&quot;&lt;path to python with pynvim installed&gt;&quot;)
let g:python3_host_prog = expand(&quot;~/.miniconda/envs/neovim/bin/python3.8&quot;) &quot; &lt;- example

let g:node_host_prog = expand(&quot;&lt;path to node with neovim installed&gt;&quot;)
let g:node_host_prog = expand(&quot;~/.nvm/versions/node/v12.16.1/bin/node&quot;) &quot; &lt;- example
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Run &lt;code class=&quot;language-text&quot;&gt;checkhealth&lt;/code&gt; again and you should now see the requirements are met&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Plugins with Vim-Plug]]></title><description><![CDATA[Installing Neovim On Mac Ubuntu Arch Create config Make directory for your Neovim config Create an  file Install vim-plug You should now…]]></description><link>https://www.chrisatmachine.com/Neovim/01-vim-plug/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Neovim/01-vim-plug/</guid><pubDate>Thu, 23 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Installing Neovim&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On Mac&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      brew install neovim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ubuntu&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      sudo apt install neovim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Arch&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      sudo pacman -S neovim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Create config&lt;/h2&gt;
&lt;p&gt;Make directory for your Neovim config&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      mkdir ~/.config/nvim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Create an &lt;code class=&quot;language-text&quot;&gt;init.vim&lt;/code&gt; file&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      touch ~/.config/nvim/init.vim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Install vim-plug&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;You should now have &lt;code class=&quot;language-text&quot;&gt;plug.vim&lt;/code&gt; in your autoload directory so it will load of on start&lt;/p&gt;
&lt;h2&gt;Add a new file for plugins&lt;/h2&gt;
&lt;p&gt;We will manage our plugins in a separate file for the sake of my own sanity&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      mkdir ~/.config/nvim/vim-plug

touch ~/.config/nvim/vim-plug/plugins.vim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Let&apos;s add some plugins&lt;/h2&gt;
&lt;p&gt;Add the following to &lt;code class=&quot;language-text&quot;&gt;~/.config/nvim/vim-plug/plugins.vim&lt;/code&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      &quot; auto-install vim-plug
if empty(glob(&apos;~/.config/nvim/autoload/plug.vim&apos;))
  silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  &quot;autocmd VimEnter * PlugInstall
  &quot;autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin(&apos;~/.config/nvim/autoload/plugged&apos;)

    &quot; Better Syntax Support
    Plug &apos;sheerun/vim-polyglot&apos;
    &quot; File Explorer
    Plug &apos;scrooloose/NERDTree&apos;
    &quot; Auto pairs for &apos;(&apos; &apos;[&apos; &apos;{&apos;
    Plug &apos;jiangmiao/auto-pairs&apos;

call plug#end()
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Source your plugins&lt;/h2&gt;
&lt;p&gt;Add the following line to &lt;code class=&quot;language-text&quot;&gt;init.vim&lt;/code&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      source $HOME/.config/nvim/vim-plug/plugins.vim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Vim-plug commands&lt;/h2&gt;
&lt;p&gt;Open &lt;code class=&quot;language-text&quot;&gt;nvim&lt;/code&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      nvim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Check the status of your plugins&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :PlugStatus
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Install all of your plugins&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :PlugInstall
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;To update your plugins&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :PlugUpdate
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;After the update you can press &lt;code class=&quot;language-text&quot;&gt;d&lt;/code&gt; to see the differences or run&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :PlugDiff
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;To remove plugins that are no longer defined in the &lt;code class=&quot;language-text&quot;&gt;plugins.vim&lt;/code&gt; file&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :PlugClean
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Finally if you want to upgrade vim-plug itself run the following&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      :PlugUpgrade
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Where did I learn all this?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;Check out vim-plug on github&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Deepspeech using a GPU]]></title><description><![CDATA[Virtual environment We will need to create another virtual environment for deepspeech-gpu Install deepspeech-gpu Model and audio files If…]]></description><link>https://www.chrisatmachine.com/Deepspeech/02-Deepspeech-gpu/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Deepspeech/02-Deepspeech-gpu/</guid><pubDate>Mon, 13 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Virtual environment&lt;/h2&gt;
&lt;p&gt;We will need to create another virtual environment for deepspeech-gpu&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      conda create -n ds-gpu python=3.8

conda activate ds-gpu
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Install deepspeech-gpu&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      pip install deepspeech-gpu
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Model and audio files&lt;/h2&gt;
&lt;p&gt;If you&apos;ve been following along you can use the same model and audio files from the &lt;strong&gt;Deepspeech basics&lt;/strong&gt; article&lt;/p&gt;
&lt;p&gt;If not you can install them like so:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      curl -LO https://github.com/mozilla/DeepSpeech/releases/download/v0.6.1/deepspeech-0.6.1-models.tar.gz

tar xvf deepspeech-0.6.1-models.tar.gz

curl -LO https://github.com/mozilla/DeepSpeech/releases/download/v0.6.1/audio-0.6.1.tar.gz

tar xvf audio-0.6.1.tar.gz
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Installing CUDA and cuDNN&lt;/h2&gt;
&lt;p&gt;This goes without saying but make sure you have an Nvidia GPU and the proprietary drivers installed&lt;/p&gt;
&lt;p&gt;You will need both of these libraries in order to run inference&lt;/p&gt;
&lt;p&gt;If you already have CUDA 10 installed then great you can move on&lt;/p&gt;
&lt;p&gt;If not I have an easy way to do so using conda&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      conda install cudatoolkit=10.0.130

conda install cudnn
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h1&gt;Run inference&lt;/h1&gt;
&lt;p&gt;We can now transcribe the audio file&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      deepspeech --model deepspeech-0.6.1-models/output_graph.pbmm --audio audio/2830-3980-0043.wav
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  </content:encoded></item><item><title><![CDATA[Deepspeech basics]]></title><description><![CDATA[What is Deepspeech From Mozilla's github repo for deepspeech: "DeepSpeech is an open source Speech-To-Text engine, using a model trained by…]]></description><link>https://www.chrisatmachine.com/Deepspeech/01-Deepspeech-basics/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Deepspeech/01-Deepspeech-basics/</guid><pubDate>Fri, 10 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;What is Deepspeech&lt;/h2&gt;
&lt;p&gt;From Mozilla&apos;s github repo for deepspeech:&lt;/p&gt;
&lt;p&gt;&quot;DeepSpeech is an open source Speech-To-Text engine, using a model trained by machine learning techniques based on Baidu&apos;s Deep Speech research paper. Project DeepSpeech uses Google&apos;s TensorFlow to make the implementation easier.&quot;&lt;/p&gt;
&lt;h2&gt;Virtual environment&lt;/h2&gt;
&lt;p&gt;First let&apos;s create a virtual environment for deepspeech&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      conda create -n ds python=3.8

conda activate deepspeech
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Install deepspeech&lt;/h2&gt;
&lt;p&gt;The only required package is deepspeech&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      pip install deepspeech
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h1&gt;Download Model&lt;/h1&gt;
&lt;p&gt;A pre-trained english model is available for download&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      curl -LO https://github.com/mozilla/DeepSpeech/releases/download/v0.6.1/deepspeech-0.6.1-models.tar.gz

tar xvf deepspeech-0.6.1-models.tar.gz
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h1&gt;Download audio files&lt;/h1&gt;
&lt;p&gt;You can download some example audio files&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      curl -LO https://github.com/mozilla/DeepSpeech/releases/download/v0.6.1/audio-0.6.1.tar.gz

tar xvf audio-0.6.1.tar.gz
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h1&gt;Run inference&lt;/h1&gt;
&lt;p&gt;We can now transcribe the audio file&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      deepspeech --model deepspeech-0.6.1-models/output_graph.pbmm --audio audio/2830-3980-0043.wav
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;If you ran the above command you should see something like &quot;experience proofsless&quot; if you are using the same model as me&lt;/p&gt;
&lt;p&gt;So not perfect, but we can try it out on our own voice as well&lt;/p&gt;
&lt;h1&gt;Record a wav file&lt;/h1&gt;
&lt;p&gt;For deepspeech to run inference correctly you will need to record your voice with some specific parameters.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sampling rate: 16 kHz&lt;/li&gt;
&lt;li&gt;Channel: 1&lt;/li&gt;
&lt;li&gt;Bit rate: 256 kb/s&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can achieve this using the &lt;code class=&quot;language-text&quot;&gt;sox&lt;/code&gt; package&lt;/p&gt;
&lt;p&gt;If you&apos;re on Ubuntu:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      sudo apt install sox
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Arch Linux:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      yay -S sox
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Mac:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      brew install sox
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;After installing &lt;code class=&quot;language-text&quot;&gt;sox&lt;/code&gt; you should have access to the &lt;code class=&quot;language-text&quot;&gt;rec&lt;/code&gt; command, we will use this to record our voice&lt;/p&gt;
&lt;p&gt;To begin recording you voice enter the following command&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      rec -r 16k -c 1 my_recording.wav
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;To make sure you have recorded the audio in the proper format we can install another package called &lt;code class=&quot;language-text&quot;&gt;mediainfo&lt;/code&gt; and run it like so:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      mediainfo my_recording.wav
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;You should see an output similar to the following:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      General
Complete name                            : my_recording.wav
Format                                   : Wave
File size                                : 64.0 KiB
Duration                                 : 2 s 48 ms
Overall bit rate mode                    : Constant
Overall bit rate                         : 256 kb/s

Audio
Format                                   : PCM
Format settings                          : Little / Signed
Codec ID                                 : 1
Duration                                 : 2 s 48 ms
Bit rate mode                            : Constant
Bit rate                                 : 256 kb/s
Channel(s)                               : 1 channel
Sampling rate                            : 16.0 kHz
Bit depth                                : 16 bits
Stream size                              : 64.0 KiB (100%)
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Run inference&lt;/h2&gt;
&lt;p&gt;Now we can run inference on our own voice data&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      deepspeech --model deepspeech-0.6.1-models/output_graph.pbmm --audio my_recording.wav
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;In the next article I&apos;ll go over running inference on a GPU&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Creating users]]></title><description><![CDATA[Here we will simply add a new user to our system and give them wheel access Add a user Add user Create password Switch users To switch to…]]></description><link>https://www.chrisatmachine.com/Linux/02-Create-User/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Linux/02-Create-User/</guid><pubDate>Sat, 04 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Here we will simply add a new user to our system and give them wheel access&lt;/p&gt;
&lt;h2&gt;Add a user&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Add user&lt;/li&gt;
&lt;/ul&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      useradd -m -g wheel &lt;your_user&gt;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;ul&gt;
&lt;li&gt;Create password&lt;/li&gt;
&lt;/ul&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      passwd &lt;your_user&gt;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Switch users&lt;/h2&gt;
&lt;p&gt;To switch to your user run:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      su &lt;your_user&gt;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Giving your user access to sudo&lt;/h2&gt;
&lt;p&gt;Make sure you have &lt;code class=&quot;language-text&quot;&gt;vi&lt;/code&gt; installed&lt;/p&gt;
&lt;p&gt;Enter:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      visudo
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;and uncomment this line so it looks like this&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      %wheel ALL=(ALL) ALL
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;if you hate typing your password everytime like me do this instead&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      %wheel ALL=(ALL) NOPASSWD: ALL
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Need more?&lt;/h2&gt;
&lt;p&gt;check out man pages for the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;useradd&lt;/li&gt;
&lt;li&gt;userdel&lt;/li&gt;
&lt;li&gt;groupadd&lt;/li&gt;
&lt;li&gt;groupdel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;you can do this by typing:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      man &lt;command&gt;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;TODO&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;i3&lt;/li&gt;
&lt;li&gt;alacritty&lt;/li&gt;
&lt;li&gt;zsh, zsh-completion
&lt;a href=&quot;https://wiki.archlinux.org/index.php/Command-line_shell#Changing_your_default_shell&quot;&gt;https://wiki.archlinux.org/index.php/Command-line_shell#Changing_your_default_shell&lt;/a&gt;
&lt;a href=&quot;https://wiki.archlinux.org/index.php/Zsh&quot;&gt;https://wiki.archlinux.org/index.php/Zsh&lt;/a&gt;
&lt;a href=&quot;https://wiki.archlinux.org/index.php/Zsh#Startup/Shutdown_files&quot;&gt;https://wiki.archlinux.org/index.php/Zsh#Startup/Shutdown_files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Installing Arch Linux (UEFI) 2020]]></title><description><![CDATA[A Note about installing Arch Linux There's a good chance by the time you are reading this that it is out of date, to stay up to date on Arch…]]></description><link>https://www.chrisatmachine.com/Linux/01-Arch-Linux-Install-UEFI/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Linux/01-Arch-Linux-Install-UEFI/</guid><pubDate>Mon, 30 Mar 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;A Note about installing Arch Linux&lt;/h2&gt;
&lt;p&gt;There&apos;s a good chance by the time you are reading this that it is out of date, to stay up to date on Arch Linux Installs checkout the &lt;a href=&quot;https://wiki.archlinux.org/index.php/Installation_guide&quot;&gt;Arch Wiki&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;A Note about UEFI&lt;/h2&gt;
&lt;p&gt;UEFI (Unified Extensible Firmware Interface) is replacing BIOS (Basic-Input-Output system), if you are using modern hardware you are assuredly using UEFI. If you are interested in reading more about why checkout this excellent &lt;a href=&quot;https://www.howtogeek.com/56958/htg-explains-how-uefi-will-replace-the-bios/&quot;&gt;article&lt;/a&gt; explaining some key differences&lt;/p&gt;
&lt;h2&gt;Set keyboard layout&lt;/h2&gt;
&lt;p&gt;If you are using a US layout then you&apos;re good no need to worry out this section if not read on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First list your options:&lt;/li&gt;
&lt;/ul&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      ls /usr/share/kbd/keymaps/**/*.map.gz
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;ul&gt;
&lt;li&gt;Now set the one you want, here&apos;s an example:&lt;/li&gt;
&lt;/ul&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      loadkeys de-latin1
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Verify boot mode&lt;/h2&gt;
&lt;p&gt;This command will verify that we will boot in UEFI mode&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      ls /sys/firmware/efi/efivars
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;IF the above directory doesn&apos;t exist you are either on old hardware or you have UEFI disabled&lt;/p&gt;
&lt;h2&gt;Internet connection&lt;/h2&gt;
&lt;p&gt;TODO add that junk for ethernet being doa&lt;/p&gt;
&lt;p&gt;I recommend installing over ethernet if your not then you can connect using &lt;code class=&quot;language-text&quot;&gt;wifi-menu&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To confirm you&apos;re internet works:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      ping -5 archlinux.org
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;If your ethernet is not working then try the following:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      ip link # this will show you a number that looks something like  enp39s0
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Use the number you found earlier to bring up your interface:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
       ip link set dev enp39s0 up
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Then when it is up run Dhcp to pull an IP from the server:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
       dhcpcd enp39s0
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Now try to ping again&lt;/p&gt;
&lt;h2&gt;Update System clock&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      timedatectl set-ntp true
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Partition disks&lt;/h2&gt;
&lt;p&gt;Here is where you will most likely find the most trouble if you are not familiar with partitioning tools such as fdisk I would recommend you watch a video for this part since this really won&apos;t change much.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First list your disks&lt;/strong&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      fdisk -l
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;You should see your disk in here mine is called /dev/sda (WARNING do not write to any of these disks unless you know it&apos;s the one you want to install Arch on)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Now choose the disk you wish to partition&lt;/strong&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      fdisk /dev/sda
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;You should now be in the fdisk utility you can press &lt;code class=&quot;language-text&quot;&gt;m&lt;/code&gt; for help&lt;/p&gt;
&lt;p&gt;All of our partitions will be &lt;strong&gt;GPT&lt;/strong&gt; partitions so you can press &lt;code class=&quot;language-text&quot;&gt;g&lt;/code&gt; when ready&lt;/p&gt;
&lt;p&gt;We will be create 3 partitions for the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boot&lt;/li&gt;
&lt;li&gt;root&lt;/li&gt;
&lt;li&gt;home&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Boot partition&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Enter &lt;code class=&quot;language-text&quot;&gt;n&lt;/code&gt; (To create new partition)&lt;/li&gt;
&lt;li&gt;Enter &lt;code class=&quot;language-text&quot;&gt;ENTER&lt;/code&gt; (For the next available partition)&lt;/li&gt;
&lt;li&gt;Enter &lt;code class=&quot;language-text&quot;&gt;ENTER&lt;/code&gt; (To start the first available section)&lt;/li&gt;
&lt;li&gt;Enter &lt;code class=&quot;language-text&quot;&gt;+512M&lt;/code&gt; (This is the recommended size for our our boot partition)&lt;/li&gt;
&lt;li&gt;Enter &lt;code class=&quot;language-text&quot;&gt;t&lt;/code&gt; (To change the type of the partition to EFI)&lt;/li&gt;
&lt;li&gt;Enter &lt;code class=&quot;language-text&quot;&gt;L&lt;/code&gt; (To get a list of all partition types EFI should be 1)&lt;/li&gt;
&lt;li&gt;Press &lt;code class=&quot;language-text&quot;&gt;q&lt;/code&gt; (to escape the list)&lt;/li&gt;
&lt;li&gt;Enter &lt;code class=&quot;language-text&quot;&gt;1&lt;/code&gt; (To set the type of the partition we just made to EFI)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Root partition&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Enter &lt;code class=&quot;language-text&quot;&gt;n&lt;/code&gt; (To create new partition)&lt;/li&gt;
&lt;li&gt;Enter &lt;code class=&quot;language-text&quot;&gt;ENTER&lt;/code&gt; (For the next available partition)&lt;/li&gt;
&lt;li&gt;Enter &lt;code class=&quot;language-text&quot;&gt;ENTER&lt;/code&gt; (To start the first available section)&lt;/li&gt;
&lt;li&gt;Enter &lt;code class=&quot;language-text&quot;&gt;+15G&lt;/code&gt; (You can increase this if you plan on installing a lot of programs 20G is usually more than enough)&lt;/li&gt;
&lt;li&gt;Enter &lt;code class=&quot;language-text&quot;&gt;t&lt;/code&gt; (To change the type of the partition to Linux Root (x86-64))&lt;/li&gt;
&lt;li&gt;Enter &lt;code class=&quot;language-text&quot;&gt;2&lt;/code&gt; (You will now need to specify which partition you are referring to since now there are two or more)&lt;/li&gt;
&lt;li&gt;Enter &lt;code class=&quot;language-text&quot;&gt;L&lt;/code&gt; (To get a list of all partition types Linux Root (x86-64) should be 24)&lt;/li&gt;
&lt;li&gt;Press &lt;code class=&quot;language-text&quot;&gt;q&lt;/code&gt; (to escape the list)&lt;/li&gt;
&lt;li&gt;Enter &lt;code class=&quot;language-text&quot;&gt;24&lt;/code&gt; (To set the type of the partition we just made to Linux Root (x86-64))&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Home partition&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Enter &lt;code class=&quot;language-text&quot;&gt;n&lt;/code&gt; (To create new partition)&lt;/li&gt;
&lt;li&gt;Enter &lt;code class=&quot;language-text&quot;&gt;ENTER&lt;/code&gt; (For the next available partition)&lt;/li&gt;
&lt;li&gt;Enter &lt;code class=&quot;language-text&quot;&gt;ENTER&lt;/code&gt; (To start the first available section)&lt;/li&gt;
&lt;li&gt;Enter &lt;code class=&quot;language-text&quot;&gt;ENTER&lt;/code&gt; (Just use the rest of the drive, I would even recommend putting this partition on a separate drive if you have a spare)&lt;/li&gt;
&lt;li&gt;Enter &lt;code class=&quot;language-text&quot;&gt;t&lt;/code&gt; (To change the type of the partition to Linux home)&lt;/li&gt;
&lt;li&gt;Enter &lt;code class=&quot;language-text&quot;&gt;3&lt;/code&gt; (You will now need to specify which partition you are referring to since now there are two or more)&lt;/li&gt;
&lt;li&gt;Enter &lt;code class=&quot;language-text&quot;&gt;L&lt;/code&gt; (To get a list of all partition types Linux home should be 28)&lt;/li&gt;
&lt;li&gt;Press &lt;code class=&quot;language-text&quot;&gt;q&lt;/code&gt; (to escape the list)&lt;/li&gt;
&lt;li&gt;Enter &lt;code class=&quot;language-text&quot;&gt;28&lt;/code&gt; (To set the type of the partition we just made to Linux home)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Write changes to disk&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Enter &lt;code class=&quot;language-text&quot;&gt;w&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now you can run &lt;code class=&quot;language-text&quot;&gt;fdisk -l&lt;/code&gt; to see your newly created partitions&lt;/p&gt;
&lt;h2&gt;Format the partitions&lt;/h2&gt;
&lt;p&gt;We have to create 3 file systems here, so let&apos;s get started&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Format the EFI partition with:&lt;/li&gt;
&lt;/ul&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      mkfs.vfat /dev/sda1
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;ul&gt;
&lt;li&gt;Format the Root partition with:&lt;/li&gt;
&lt;/ul&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      mkfs.ext4 /dev/sda2
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;ul&gt;
&lt;li&gt;Format the Home partition with:&lt;/li&gt;
&lt;/ul&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      mkfs.ext4 /dev/sda3
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Mount the filesystems&lt;/h2&gt;
&lt;p&gt;You will need to mount sda1, sda2 and sda3, but you will need to mount Root first&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mount sda2 (Root)&lt;/li&gt;
&lt;/ul&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      mount /dev/sda2 /mnt
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;ul&gt;
&lt;li&gt;Mount sda1 (Boot)&lt;/li&gt;
&lt;/ul&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      mkdir /mnt/boot
mount /dev/sda1 /mnt/boot
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;ul&gt;
&lt;li&gt;Mount sda3 (Home)&lt;/li&gt;
&lt;/ul&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      mkdir /mnt/home
mount /dev/sda3 /mnt/home
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h3&gt;Check mounts are correct&lt;/h3&gt;
&lt;p&gt;You can run &lt;code class=&quot;language-text&quot;&gt;df&lt;/code&gt; to make sure your mounts are in the right place&lt;/p&gt;
&lt;h2&gt;Install essential packages (and a few others)&lt;/h2&gt;
&lt;p&gt;Run the following:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      pacstrap /mnt base base-devel linux linux-firmware vim
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;If you have an intel processor also include &lt;code class=&quot;language-text&quot;&gt;intel-ucode&lt;/code&gt;, for AMD &lt;code class=&quot;language-text&quot;&gt;amd-ucode&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Configure the system&lt;/h2&gt;
&lt;h3&gt;Fstab&lt;/h3&gt;
&lt;p&gt;Generate UUIDs for newly created filesystem&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      genfstab -U /mnt &gt;&gt; /mnt/etc/fstab
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;You can check that it worked by printing the file:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      cat /mnt/etc/fstab
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h3&gt;Chroot&lt;/h3&gt;
&lt;p&gt;Now you can change root into the new system:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      arch-chroot /mnt
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Create a swap file&lt;/h2&gt;
&lt;p&gt;I&apos;m going to use the varibale X to indicate what your swap size should be&lt;/p&gt;
&lt;p&gt;where X is RAM+sqrt(RAM)&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      fallocate -l XGB /swapfile

chmod 600 /swapfile

mkswap /swapfile

swapon /swapfile
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Add swapfile to fstab&lt;/h2&gt;
&lt;p&gt;Add the following to fstab&lt;/p&gt;
&lt;p&gt;Open &lt;code class=&quot;language-text&quot;&gt;/etc/fstab&lt;/code&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      /swapfile none swap default 0 0
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h3&gt;Time zone&lt;/h3&gt;
&lt;p&gt;Set the time zone:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      ln -sf /usr/share/zoneinfo/Region/City /etc/localtime
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Just search through /usr/share/zoneinfo until you find your nearest City&lt;/p&gt;
&lt;p&gt;Run &lt;code class=&quot;language-text&quot;&gt;hwclock&lt;/code&gt;:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      hwclock --systohc
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h3&gt;Localization&lt;/h3&gt;
&lt;p&gt;Uncommnent &lt;code class=&quot;language-text&quot;&gt;en_US.UTF-8 UTF-8&lt;/code&gt; and other needed locales in &lt;code class=&quot;language-text&quot;&gt;/etc/locale.gen&lt;/code&gt;, and generate them with:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      locale-gen
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Create the &lt;code class=&quot;language-text&quot;&gt;locale.conf&lt;/code&gt; file, and set LANG variable&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      touch /etc/locale.conf

echo LANG=en_US.UTF-8 &gt;&gt; /etc/locale.conf
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Network configuration&lt;/h2&gt;
&lt;p&gt;Create &lt;code class=&quot;language-text&quot;&gt;hostname&lt;/code&gt; file:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      touch /etc/hostname

echo mycoolhostname &gt;&gt; /etc/hostname
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Add matching entries to &lt;code class=&quot;language-text&quot;&gt;hosts&lt;/code&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      vim /etc/hosts

127.0.0.1	  localhost
::1		      localhost
127.0.1.1	  mycoolhostname.localdomain  mycoolhostname
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Root password&lt;/h2&gt;
&lt;p&gt;Change the root password:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      passwd
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Installing more packages&lt;/h2&gt;
&lt;p&gt;Here we can install a few more packages for networking and things like man pages&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      pacman -S man-db man-pages texinfo inetutils netctl dhcpcd networkmanager wpa_supplicant dialog linux-headers network-manager-applet
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Boot loader&lt;/h2&gt;
&lt;p&gt;We&apos;ll be using grub because it has the biggest presence in the boot loader world&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      pacman -S grub efibootmgr os-prober mtools
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Now let&apos;s install our boot loader&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Generate our config&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      grub-mkconfig -o /boot/grub/grub.cfg
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;You&apos;re done&lt;/h2&gt;
&lt;p&gt;Enter &lt;code class=&quot;language-text&quot;&gt;exit&lt;/code&gt; then &lt;code class=&quot;language-text&quot;&gt;reboot&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Enable internet service&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      systemctl start dhcpcd.service

systemctl enable dhcpcd.service
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;arch boot mount to just /boot for windows&lt;/li&gt;
&lt;li&gt;I&apos;ll make a windows dual boot if there is interest&lt;/li&gt;
&lt;li&gt;If you dual boot with windows it is strongly recommended to disable Fast Startup&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Merging an upstream repo into your fork]]></title><description><![CDATA[This article is from Github's help page here I am adding it here to quickly reference it when I inevitably forget how to do it. If you don't…]]></description><link>https://www.chrisatmachine.com/Git/01-Merging-Upstream-Repo-Fork/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Git/01-Merging-Upstream-Repo-Fork/</guid><pubDate>Thu, 01 Aug 2019 00:00:00 GMT</pubDate><content:encoded>&lt;br /&gt;
&lt;p&gt;This article is from Github&apos;s help page &lt;a href=&quot;https://help.github.com/en/articles/merging-an-upstream-repository-into-your-fork&quot;&gt;here&lt;/a&gt; I am adding it here to quickly reference it when I inevitably forget how to do it.&lt;/p&gt;
&lt;p&gt;If you don&apos;t have push (write) access to an upstream repository, then you can pull commits from that repository into your own fork.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open Terminal.&lt;/li&gt;
&lt;li&gt;Change the current working directory to your local project.&lt;/li&gt;
&lt;li&gt;Check out the branch you wish to merge to. Usually, you will merge into &lt;code class=&quot;language-text&quot;&gt;master&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      git checkout master
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Pull the desired branch from the upstream repository. This method will retain the commit history without modification.&lt;/li&gt;
&lt;/ol&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      git pull https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git BRANCH_NAME
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;If there are conflicts, resolve them.&lt;/li&gt;
&lt;li&gt;Commit the merge.&lt;/li&gt;
&lt;li&gt;Review the changes and ensure they are satisfactory.&lt;/li&gt;
&lt;li&gt;Push the merge to your GitHub repository.&lt;/li&gt;
&lt;/ol&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      git push origin master
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  </content:encoded></item><item><title><![CDATA[Managing Environments with Miniconda]]></title><description><![CDATA[The previous article explains how to properly install and configure Miniconda. This article will explain how to manage your environments…]]></description><link>https://www.chrisatmachine.com/Miniconda/02-How-to use-miniconda/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Miniconda/02-How-to use-miniconda/</guid><pubDate>Fri, 28 Jun 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The previous article explains how to properly install and configure Miniconda. This article will explain how to manage your environments.&lt;/p&gt;
&lt;h2&gt;Creating a Virtual Environment&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      conda create --name &lt;myenv&gt; python=&lt;3.7&gt; pip -y
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;This command will create a virtual environment with the following properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-name myenv You can choose any name you want here&lt;/li&gt;
&lt;li&gt;python=3.7 you can set the version to be whatever you want such as 2.7 (if you don&apos;t specify a version it will choose the latest)&lt;/li&gt;
&lt;li&gt;-y this just preemptively answers yes to creating the environment&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Activating a Virtual Environment&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      conda activate &lt;myenv&gt;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Deactivating a Virtual Environment&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      conda deactivate &lt;myenv&gt;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Listing Available Environments&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      conda env list
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Removing an Environment&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      conda remove --name &lt;myenv&gt; --all
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Cloning an Environment&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      conda create --name &lt;myclone&gt; --clone &lt;myenv&gt;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Removing PS1 Prompt&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      conda config --set changeps1 false
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;To re-enable:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      conda config --set changeps1 true
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Searching for packages&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      conda search &lt;package-name&gt;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Sharing an environment&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;First export the environment&lt;/li&gt;
&lt;/ul&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      conda env export &gt; environment.yml
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;ul&gt;
&lt;li&gt;Now install in another Anaconda Environment Manager&lt;/li&gt;
&lt;/ul&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      conda env create -f environment.yml
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Installing Packages &amp;#x26; Pinning Versions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;With conda (=)&lt;/li&gt;
&lt;/ul&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      conda install &lt;package&gt;=&lt;version-number&gt;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;ul&gt;
&lt;li&gt;With pip (==)&lt;/li&gt;
&lt;/ul&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      pip install &lt;package&gt;==&lt;version-number&gt;
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  </content:encoded></item><item><title><![CDATA[Setting up a Remote Jupyter Lab Server]]></title><description><![CDATA[In order to setup a remote Jupyter Lab server you must complete the following steps: Open ports 22 (ssh) and 8888 (jupyter) Configure…]]></description><link>https://www.chrisatmachine.com/Jupyter/01-jupyter-remote/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Jupyter/01-jupyter-remote/</guid><pubDate>Tue, 25 Jun 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In order to setup a remote Jupyter Lab server you must complete the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open ports 22 (ssh) and 8888 (jupyter)&lt;/li&gt;
&lt;li&gt;Configure Jupyter Lab to request a password instead of a token&lt;/li&gt;
&lt;li&gt;Start the Jupyter Lab server on the Remote server&lt;/li&gt;
&lt;li&gt;Access Jupyter on your local browser&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Configure your Router&lt;/h2&gt;
&lt;p&gt;This step will be router specific but will be a similar process no matter what kind of router you have.&lt;/p&gt;
&lt;p&gt;You will need to do get the IP address of your server:&lt;/p&gt;
&lt;code-fence lang=&quot;bash&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      $ hostname -I
192.168.0.120
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Use this private IP address when forwarding both ports 22 and 8888&lt;/p&gt;
&lt;h2&gt;Configure Jupyter Lab Password&lt;/h2&gt;
&lt;code-fence lang=&quot;bash&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      $ jupyter notebook --generate-config
$ jupyter notebook password
Enter password:  ****
Verify password: ****
[NotebookPasswordApp] Wrote hashed password to /Users/username/.jupyter/jupyter_notebook_config.json
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;You will use this password when logging in remotely&lt;/p&gt;
&lt;h2&gt;Starting Jupyter Lab on the Remote Server&lt;/h2&gt;
&lt;code-fence lang=&quot;bash&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      jupyter-lab --ip 0.0.0.0 --port 8888 --no-browser
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Starting Jupyter like this will make sure you can access it publicly and will also stop Jupyter from trying to start a browser instance on your remote machine&lt;/p&gt;
&lt;h2&gt;Access Jupyter on a Local Browser&lt;/h2&gt;
&lt;p&gt;Navigate to the following address:&lt;/p&gt;
&lt;code-fence lang=&quot;bash&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      http://&lt;your-routers-public-ip&gt;:8888
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;It should ask you for the password you set up earlier and you should be able to use Jupyter Lab remotely&lt;/p&gt;</content:encoded></item><item><title><![CDATA[How to install Miniconda]]></title><description><![CDATA[This guide will show you how to install the latest version of Miniconda. Miniconda is a lightweight version of Anaconda: a virtual…]]></description><link>https://www.chrisatmachine.com/Miniconda/01-Install-Miniconda/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Miniconda/01-Install-Miniconda/</guid><pubDate>Tue, 25 Jun 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This guide will show you how to install the latest version of Miniconda. Miniconda is a lightweight version of Anaconda: a virtual environment manager for Python.&lt;/p&gt;
&lt;h2&gt;Download Install Script&lt;/h2&gt;
&lt;h3&gt;Linux&lt;/h3&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h3&gt;Mac&lt;/h3&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O ~/miniconda.sh
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Install Minconda&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      sh ~/miniconda.sh -b -f -p  $HOME/.miniconda

rm ~/miniconda.sh
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Setting up your shell&lt;/h2&gt;
&lt;p&gt;If you don&apos;t want the conda base environment (you may not want this because as of now there are conflicts with later versions of Python and npm)&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      conda config --set auto_activate_base false
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;The first time you run it, it&apos;ll create a ./condarc in your home directory with that setting to override the default.&lt;/p&gt;
&lt;p&gt;Now you can initialize your shell with the following command:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      conda init $SHELL
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Now close your terminal and open a new one and your conda environment should be fully configured.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Intro to Spring Boot]]></title><description><![CDATA[Code can be found here This is a spring boot application which provides REST endpoints to perform CRUD operations on topics and related…]]></description><link>https://www.chrisatmachine.com/Spring/01-Intro-to-Springboot/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Spring/01-Intro-to-Springboot/</guid><pubDate>Fri, 12 Apr 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Code can be found &lt;a href=&quot;https://github.com/ChristianChiarulli/SpringBootIntro&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a spring boot application which provides REST endpoints to perform CRUD operations on topics and related courses&lt;/p&gt;
&lt;p&gt;The project comes with a wrapper for Maven &lt;code class=&quot;language-text&quot;&gt;mvnw&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;to create the &lt;code class=&quot;language-text&quot;&gt;jar&lt;/code&gt; simply run the following:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      ./mvnw clean package
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;To start the application run the following:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      java -jar target/filename.jar
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;This will start a tomcat server on port 8080&lt;/p&gt;
&lt;p&gt;It will also start actuator on port 9001&lt;/p&gt;
&lt;p&gt;And you can use a tool like Postman to make requests.&lt;/p&gt;
&lt;p&gt;We are also using an embedded database Apache Derby&lt;/p&gt;
&lt;h2&gt;Requests&lt;/h2&gt;
&lt;p&gt;This project handles GET, POST, PUT and DELETE requests for topics and their courses&lt;/p&gt;
&lt;p&gt;Here are a few example calls you can make:&lt;/p&gt;
&lt;h3&gt;Topic CRUD operations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;get all&lt;/li&gt;
&lt;/ul&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      http://localhost:8080/topics
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;ul&gt;
&lt;li&gt;get particular topic&lt;/li&gt;
&lt;/ul&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      http://localhost:8080/topics/{topicId}
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;ul&gt;
&lt;li&gt;post topic&lt;/li&gt;
&lt;/ul&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      http://localhost:8080/topics
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;body:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      {
  &quot;id&quot;: &quot;java&quot;,
  &quot;name&quot;: &quot;Java&quot;,
  &quot;description&quot;: &quot;Java description&quot;
}
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;ul&gt;
&lt;li&gt;put topic&lt;/li&gt;
&lt;/ul&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      http://localhost:8080/topics/{topicId}
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;make sure you pass an updated body&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;delete topic&lt;/li&gt;
&lt;/ul&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      http://localhost:8080/topics/{topicId}
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h3&gt;Course CRUD operations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;get all&lt;/li&gt;
&lt;/ul&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      http://localhost:8080/topics/{topicId}/courses
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;ul&gt;
&lt;li&gt;get particular topic&lt;/li&gt;
&lt;/ul&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      http://localhost:8080/topics/{topicId}/courses/{id}
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;ul&gt;
&lt;li&gt;post topic&lt;/li&gt;
&lt;/ul&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      http://localhost:8080/topics/{topicId}/courses
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;body:&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      {
  &quot;id&quot;: &quot;java-spring&quot;,
  &quot;name&quot;: &quot;Java Spring&quot;,
  &quot;description&quot;: &quot;Java Spring description&quot;
}
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;ul&gt;
&lt;li&gt;put topic&lt;/li&gt;
&lt;/ul&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      http://localhost:8080/topics/{topicId}/courses/{id}
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;make sure you pass an updated body&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;delete topic&lt;/li&gt;
&lt;/ul&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      http://localhost:8080/topics/{topicId}/courses/{id}
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;To view Actuator&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      http://localhost:9001/actuator/health
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  </content:encoded></item><item><title><![CDATA[Installing NVM for Node.js]]></title><description><![CDATA[Step 1: Download nvm If you're on linux you may first need  The following command will automatically install nvm using  Step 2: Verify…]]></description><link>https://www.chrisatmachine.com/Nodejs/01-Install-NVM/</link><guid isPermaLink="false">https://www.chrisatmachine.com/Nodejs/01-Install-NVM/</guid><pubDate>Sun, 17 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Step 1: Download nvm&lt;/h2&gt;
&lt;p&gt;If you&apos;re on linux you may first need &lt;code class=&quot;language-text&quot;&gt;curl&lt;/code&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      sudo apt install curl
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;The following command will automatically install nvm using &lt;code class=&quot;language-text&quot;&gt;curl&lt;/code&gt;&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Step 2: Verify installation&lt;/h2&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      nvm --version
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Install current LTS version of Node.js&lt;/h2&gt;
&lt;p&gt;First we install it by running the following&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      nvm install --lts
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Next we can activate it&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      nvm use --lts
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Install latest version of Node.js&lt;/h2&gt;
&lt;p&gt;First we install it by running the following&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      nvm install node
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;p&gt;Next we can activate it&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      nvm use node
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Add the following to your &lt;code class=&quot;language-text&quot;&gt;bash_profile&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The first two lines nvm adds itself to your &lt;code class=&quot;language-text&quot;&gt;.bashrc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The third line will give you autocomplete with nvm which is nice&lt;/p&gt;
&lt;p&gt;I recommend adding it to your &lt;code class=&quot;language-text&quot;&gt;.bash_profile&lt;/code&gt; because that is typically where I add all of my exports&lt;/p&gt;
&lt;code-fence lang=&quot;null&quot; null&gt;
    &lt;textarea vue-slot=&quot;code&quot;&gt;
      export NVM_DIR=&quot;$HOME/.nvm&quot;
[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm
[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion
    &lt;/textarea&gt;
    &lt;/code-fence&gt;
  
&lt;h2&gt;Wrap up&lt;/h2&gt;
&lt;p&gt;We now have the latest version of Node.js as well as the long term support release installed.&lt;/p&gt;
&lt;p&gt;You are free to switch between the two using the &lt;code class=&quot;language-text&quot;&gt;use&lt;/code&gt; command.&lt;/p&gt;</content:encoded></item></channel></rss>